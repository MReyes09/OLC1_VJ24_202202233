
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;
import instrucciones.Print;
import instrucciones.Round;
import instrucciones.Length;
import instrucciones.Find;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.sentencias_Control.If;
import instrucciones.sentencias_Control.IF_ELSE_IF;
import instrucciones.sentencias_Control.Match;
import instrucciones.sentencias_Control.Cases_Match;
import instrucciones.sentencias_Ciclicas.For;
import instrucciones.sentencias_Ciclicas.While;
import instrucciones.sentencias_Ciclicas.Do_While;
import instrucciones.sentencias_Transferencia.Break;
import instrucciones.sentencias_Transferencia.Continue;
import instrucciones.subrutina.Metodo;
import instrucciones.subrutina.Execute;
import instrucciones.vectores.Declaracion_Vectores;
import instrucciones.vectores.AsignacionVec;
import instrucciones.listas.Declaracion_LDinamicas;
import instrucciones.listas.AsignacionLista;
import instrucciones.listas.OperadoresLista;
import instrucciones.subrutina.Llamada;
import instrucciones.struct.Declaracion_Struct;
import expresiones.Nativo;
import expresiones.aritmeticas.Aritmeticas;
import expresiones.aritmeticas.OperadoresAritmeticos;
import expresiones.relacionales.OperadoresRelacionales;
import expresiones.relacionales.Relacionales;
import expresiones.logicas.OperadoresLogicos;
import expresiones.logicas.Logicas;
import expresiones.casteo.Casteos;
import expresiones.casteo.OperadoresCasteo;
import expresiones.variable.AccesoVar;
import expresiones.variable.OperadoresVariable;
import expresiones.vectores.AccesoVec;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\007\007\000\002" +
    "\010\011\000\002\010\007\000\002\010\006\000\002\032" +
    "\015\000\002\032\017\000\002\033\015\000\002\034\010" +
    "\000\002\031\004\000\002\031\003\000\002\035\005\000" +
    "\002\035\003\000\002\036\007\000\002\036\005\000\002" +
    "\023\003\000\002\023\003\000\002\011\006\000\002\011" +
    "\005\000\002\011\005\000\002\037\011\000\002\037\014" +
    "\000\002\040\011\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\012\011\000\002\012\015\000\002\012" +
    "\013\000\002\013\007\000\002\004\004\000\002\004\003" +
    "\000\002\005\007\000\002\005\007\000\002\014\014\000" +
    "\002\015\005\000\002\015\004\000\002\015\004\000\002" +
    "\020\004\000\002\021\004\000\002\016\011\000\002\017" +
    "\013\000\002\025\012\000\002\025\011\000\002\026\006" +
    "\000\002\026\004\000\002\027\010\000\002\027\007\000" +
    "\002\041\007\000\002\041\006\000\002\030\005\000\002" +
    "\030\003\000\002\024\004\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\004\000\002\024\005\000\002\024\006" +
    "\000\002\024\006\000\002\024\006\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\006\000\002\024\011\000\002\024\010\000\002\024\006" +
    "\000\002\024\006\000\002\024\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\054\003\032\010\016\013\012\014\027\015" +
    "\007\016\036\017\041\020\005\032\045\045\053\065\034" +
    "\066\010\067\056\070\030\072\021\073\017\074\044\075" +
    "\057\076\014\077\035\101\043\001\002\000\060\002\ufff1" +
    "\003\ufff1\010\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\032\ufff1\036\ufff1\045\ufff1\065\ufff1\066\ufff1" +
    "\067\ufff1\070\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076" +
    "\ufff1\077\ufff1\101\ufff1\001\002\000\014\010\uffcf\037\uffcf" +
    "\047\uffcf\054\uffcf\064\uffcf\001\002\000\004\010\u011e\001" +
    "\002\000\014\010\uffd2\037\uffd2\047\uffd2\054\uffd2\064\uffd2" +
    "\001\002\000\004\010\uffda\001\002\000\060\002\ufff4\003" +
    "\ufff4\010\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\032\ufff4\036\ufff4\045\ufff4\065\ufff4\066\ufff4\067" +
    "\ufff4\070\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4" +
    "\077\ufff4\101\ufff4\001\002\000\004\033\u011a\001\002\000" +
    "\060\002\ufff3\003\ufff3\010\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\032\ufff3\036\ufff3\045\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\072\ufff3\073\ufff3\074\ufff3" +
    "\075\ufff3\076\ufff3\077\ufff3\101\ufff3\001\002\000\004\064" +
    "\u0119\001\002\000\060\002\ufffe\003\ufffe\010\ufffe\013\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\032\ufffe\036" +
    "\ufffe\045\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\072\ufffe" +
    "\073\ufffe\074\ufffe\075\ufffe\076\ufffe\077\ufffe\101\ufffe\001" +
    "\002\000\020\027\360\030\356\033\u0103\037\u0102\042\u0101" +
    "\047\357\063\216\001\002\000\004\033\353\001\002\000" +
    "\056\002\000\003\032\010\016\013\012\014\027\015\007" +
    "\016\036\017\041\020\005\032\045\045\053\065\034\066" +
    "\010\067\056\070\030\072\021\073\017\074\044\075\057" +
    "\076\014\077\035\101\043\001\002\000\032\004\066\005" +
    "\072\006\067\007\102\010\074\011\073\012\075\022\071" +
    "\033\076\061\100\102\077\103\070\001\002\000\060\002" +
    "\uffef\003\uffef\010\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\032\uffef\036\uffef\045\uffef\065\uffef\066" +
    "\uffef\067\uffef\070\uffef\072\uffef\073\uffef\074\uffef\075\uffef" +
    "\076\uffef\077\uffef\101\uffef\001\002\000\060\002\uffec\003" +
    "\uffec\010\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\032\uffec\036\uffec\045\uffec\065\uffec\066\uffec\067" +
    "\uffec\070\uffec\072\uffec\073\uffec\074\uffec\075\uffec\076\uffec" +
    "\077\uffec\101\uffec\001\002\000\060\002\ufff8\003\ufff8\010" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\032\ufff8\036\ufff8\045\ufff8\065\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8" +
    "\101\ufff8\001\002\000\060\002\uffee\003\uffee\010\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\032\uffee" +
    "\036\uffee\045\uffee\065\uffee\066\uffee\067\uffee\070\uffee\072" +
    "\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\101\uffee" +
    "\001\002\000\004\010\300\001\002\000\014\010\uffd3\037" +
    "\uffd3\047\uffd3\054\uffd3\064\uffd3\001\002\000\004\033\265" +
    "\001\002\000\060\002\ufff2\003\ufff2\010\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\032\ufff2\036\ufff2" +
    "\045\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\072\ufff2\073" +
    "\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\101\ufff2\001\002" +
    "\000\062\002\uffea\003\uffea\010\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\032\uffea\036\uffea\045\uffea" +
    "\064\264\065\uffea\066\uffea\067\uffea\070\uffea\072\uffea\073" +
    "\uffea\074\uffea\075\uffea\076\uffea\077\uffea\101\uffea\001\002" +
    "\000\060\002\ufff0\003\ufff0\010\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\032\ufff0\036\ufff0\045\ufff0" +
    "\065\ufff0\066\ufff0\067\ufff0\070\ufff0\072\ufff0\073\ufff0\074" +
    "\ufff0\075\ufff0\076\ufff0\077\ufff0\101\ufff0\001\002\000\004" +
    "\064\263\001\002\000\014\010\uffce\037\uffce\047\uffce\054" +
    "\uffce\064\uffce\001\002\000\014\010\uffd0\037\uffd0\047\uffd0" +
    "\054\uffd0\064\uffd0\001\002\000\060\002\ufffb\003\ufffb\010" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\032\ufffb\036\ufffb\045\ufffb\065\ufffb\066\ufffb\067\ufffb\070" +
    "\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb" +
    "\101\ufffb\001\002\000\060\002\ufffc\003\ufffc\010\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\032\ufffc" +
    "\036\ufffc\045\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\072" +
    "\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\101\ufffc" +
    "\001\002\000\014\010\uffd1\037\uffd1\047\uffd1\054\uffd1\064" +
    "\uffd1\001\002\000\060\002\ufff9\003\ufff9\010\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\032\ufff9\036" +
    "\ufff9\045\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\072\ufff9" +
    "\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\101\ufff9\001" +
    "\002\000\004\010\251\001\002\000\004\033\243\001\002" +
    "\000\004\052\231\001\002\000\060\002\ufffd\003\ufffd\010" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\032\ufffd\036\ufffd\045\ufffd\065\ufffd\066\ufffd\067\ufffd\070" +
    "\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd" +
    "\101\ufffd\001\002\000\060\002\ufffa\003\ufffa\010\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\032\ufffa" +
    "\036\ufffa\045\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\072" +
    "\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa\101\ufffa" +
    "\001\002\000\060\002\uffed\003\uffed\010\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\032\uffed\036\uffed" +
    "\045\uffed\065\uffed\066\uffed\067\uffed\070\uffed\072\uffed\073" +
    "\uffed\074\uffed\075\uffed\076\uffed\077\uffed\101\uffed\001\002" +
    "\000\060\002\ufff7\003\ufff7\010\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\032\ufff7\036\ufff7\045\ufff7" +
    "\065\ufff7\066\ufff7\067\ufff7\070\ufff7\072\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\076\ufff7\077\ufff7\101\ufff7\001\002\000\004" +
    "\002\230\001\002\000\004\035\205\001\002\000\060\002" +
    "\ufff6\003\ufff6\010\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\032\ufff6\036\ufff6\045\ufff6\065\ufff6\066" +
    "\ufff6\067\ufff6\070\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6" +
    "\076\ufff6\077\ufff6\101\ufff6\001\002\000\060\002\ufff5\003" +
    "\ufff5\010\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\032\ufff5\036\ufff5\045\ufff5\065\ufff5\066\ufff5\067" +
    "\ufff5\070\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5" +
    "\077\ufff5\101\ufff5\001\002\000\004\010\uffdb\001\002\000" +
    "\004\035\060\001\002\000\054\003\032\010\016\013\012" +
    "\014\027\015\007\016\036\017\041\020\005\032\045\045" +
    "\053\065\034\066\010\067\056\070\030\072\021\073\017" +
    "\074\044\075\057\076\014\077\035\101\043\001\002\000" +
    "\056\003\032\010\016\013\012\014\027\015\007\016\036" +
    "\017\041\020\005\032\045\036\063\045\053\065\034\066" +
    "\010\067\056\070\030\072\021\073\017\074\044\075\057" +
    "\076\014\077\035\101\043\001\002\000\060\002\uffff\003" +
    "\uffff\010\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff" +
    "\020\uffff\032\uffff\036\uffff\045\uffff\065\uffff\066\uffff\067" +
    "\uffff\070\uffff\072\uffff\073\uffff\074\uffff\075\uffff\076\uffff" +
    "\077\uffff\101\uffff\001\002\000\004\074\064\001\002\000" +
    "\004\033\065\001\002\000\032\004\066\005\072\006\067" +
    "\007\102\010\074\011\073\012\075\022\071\033\076\061" +
    "\100\102\077\103\070\001\002\000\054\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\034\uff9c\035\uff9c\040" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\060\uff9c\062\uff9c\064\uff9c\100\uff9c\001" +
    "\002\000\054\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\034\uff9d\035\uff9d\040\uff9d\050\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d" +
    "\062\uff9d\064\uff9d\100\uff9d\001\002\000\004\033\202\001" +
    "\002\000\032\004\066\005\072\006\067\007\102\010\074" +
    "\011\073\012\075\022\071\033\076\061\100\102\077\103" +
    "\070\001\002\000\054\021\uff9e\022\uff9e\023\uff9e\024\uff9e" +
    "\025\uff9e\026\uff9e\034\uff9e\035\uff9e\040\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e" +
    "\060\uff9e\062\uff9e\064\uff9e\100\uff9e\001\002\000\054\021" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\034\uff9b" +
    "\035\uff9b\040\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\062\uff9b\064\uff9b" +
    "\100\uff9b\001\002\000\060\021\uff98\022\uff98\023\uff98\024" +
    "\uff98\025\uff98\026\uff98\034\uff98\035\uff98\037\163\040\uff98" +
    "\042\162\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055" +
    "\uff98\056\uff98\057\uff98\060\uff98\062\uff98\064\uff98\100\uff98" +
    "\001\002\000\054\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\026\uff9a\034\uff9a\035\uff9a\040\uff9a\050\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060" +
    "\uff9a\062\uff9a\064\uff9a\100\uff9a\001\002\000\040\004\066" +
    "\005\072\006\067\007\102\010\074\011\073\012\075\014" +
    "\150\015\147\016\151\022\071\033\076\061\100\102\077" +
    "\103\070\001\002\000\004\033\144\001\002\000\032\004" +
    "\066\005\072\006\067\007\102\010\074\011\073\012\075" +
    "\022\071\033\076\061\100\102\077\103\070\001\002\000" +
    "\042\021\113\022\107\023\112\024\116\025\106\026\117" +
    "\034\115\050\110\051\120\052\114\053\122\054\105\055" +
    "\111\056\121\057\103\060\104\001\002\000\054\021\uff99" +
    "\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\034\uff99\035" +
    "\uff99\040\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\062\uff99\064\uff99\100" +
    "\uff99\001\002\000\032\004\066\005\072\006\067\007\102" +
    "\010\074\011\073\012\075\022\071\033\076\061\100\102" +
    "\077\103\070\001\002\000\032\004\066\005\072\006\067" +
    "\007\102\010\074\011\073\012\075\022\071\033\076\061" +
    "\100\102\077\103\070\001\002\000\032\004\066\005\072" +
    "\006\067\007\102\010\074\011\073\012\075\022\071\033" +
    "\076\061\100\102\077\103\070\001\002\000\032\004\066" +
    "\005\072\006\067\007\102\010\074\011\073\012\075\022" +
    "\071\033\076\061\100\102\077\103\070\001\002\000\032" +
    "\004\066\005\072\006\067\007\102\010\074\011\073\012" +
    "\075\022\071\033\076\061\100\102\077\103\070\001\002" +
    "\000\032\004\066\005\072\006\067\007\102\010\074\011" +
    "\073\012\075\022\071\033\076\061\100\102\077\103\070" +
    "\001\002\000\032\004\066\005\072\006\067\007\102\010" +
    "\074\011\073\012\075\022\071\033\076\061\100\102\077" +
    "\103\070\001\002\000\032\004\066\005\072\006\067\007" +
    "\102\010\074\011\073\012\075\022\071\033\076\061\100" +
    "\102\077\103\070\001\002\000\032\004\066\005\072\006" +
    "\067\007\102\010\074\011\073\012\075\022\071\033\076" +
    "\061\100\102\077\103\070\001\002\000\032\004\066\005" +
    "\072\006\067\007\102\010\074\011\073\012\075\022\071" +
    "\033\076\061\100\102\077\103\070\001\002\000\004\064" +
    "\130\001\002\000\032\004\066\005\072\006\067\007\102" +
    "\010\074\011\073\012\075\022\071\033\076\061\100\102" +
    "\077\103\070\001\002\000\032\004\066\005\072\006\067" +
    "\007\102\010\074\011\073\012\075\022\071\033\076\061" +
    "\100\102\077\103\070\001\002\000\032\004\066\005\072" +
    "\006\067\007\102\010\074\011\073\012\075\022\071\033" +
    "\076\061\100\102\077\103\070\001\002\000\032\004\066" +
    "\005\072\006\067\007\102\010\074\011\073\012\075\022" +
    "\071\033\076\061\100\102\077\103\070\001\002\000\032" +
    "\004\066\005\072\006\067\007\102\010\074\011\073\012" +
    "\075\022\071\033\076\061\100\102\077\103\070\001\002" +
    "\000\054\021\113\022\107\023\112\024\116\025\106\026" +
    "\117\034\uffa9\035\uffa9\040\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\062" +
    "\uffa9\064\uffa9\100\uffa9\001\002\000\054\021\113\022\107" +
    "\023\112\024\116\025\106\026\117\034\uffa6\035\uffa6\040" +
    "\uffa6\050\110\051\120\052\114\053\122\054\105\055\111" +
    "\056\uffa6\057\103\060\104\062\uffa6\064\uffa6\100\uffa6\001" +
    "\002\000\054\021\113\022\107\023\112\024\116\025\106" +
    "\026\117\034\uffab\035\uffab\040\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab" +
    "\062\uffab\064\uffab\100\uffab\001\002\000\054\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\106\026\uffb0\034\uffb0\035\uffb0" +
    "\040\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\062\uffb0\064\uffb0\100\uffb0" +
    "\001\002\000\054\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\106\026\uffae\034\uffae\035\uffae\040\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060" +
    "\uffae\062\uffae\064\uffae\100\uffae\001\002\000\060\002\uffbe" +
    "\003\uffbe\010\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\032\uffbe\036\uffbe\045\uffbe\065\uffbe\066\uffbe" +
    "\067\uffbe\070\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076" +
    "\uffbe\077\uffbe\101\uffbe\001\002\000\054\021\113\022\107" +
    "\023\112\024\116\025\106\026\117\034\uffaa\035\uffaa\040" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\057\uffaa\060\uffaa\062\uffaa\064\uffaa\100\uffaa\001" +
    "\002\000\054\021\uffb2\022\uffb2\023\112\024\116\025\106" +
    "\026\117\034\uffb2\035\uffb2\040\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\062\uffb2\064\uffb2\100\uffb2\001\002\000\054\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\106\026\uffaf\034\uffaf\035\uffaf" +
    "\040\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\062\uffaf\064\uffaf\100\uffaf" +
    "\001\002\000\054\021\113\022\107\023\112\024\116\025" +
    "\106\026\117\034\uffa7\035\uffa7\040\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\062\uffa7\064\uffa7\100\uffa7\001\002\000\054\021\113" +
    "\022\107\023\112\024\116\025\106\026\117\034\uffac\035" +
    "\uffac\040\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\062\uffac\064\uffac\100" +
    "\uffac\001\002\000\054\021\uffb1\022\uffb1\023\112\024\116" +
    "\025\106\026\117\034\uffb1\035\uffb1\040\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\062\uffb1\064\uffb1\100\uffb1\001\002\000\052\021" +
    "\uffad\022\uffad\023\uffad\024\uffad\026\uffad\034\uffad\035\uffad" +
    "\040\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\062\uffad\064\uffad\100\uffad" +
    "\001\002\000\054\021\113\022\107\023\112\024\116\025" +
    "\106\026\117\034\uffa8\035\uffa8\040\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060" +
    "\uffa8\062\uffa8\064\uffa8\100\uffa8\001\002\000\054\021\113" +
    "\022\107\023\112\024\116\025\106\026\117\034\uffa4\035" +
    "\uffa4\040\uffa4\050\110\051\120\052\114\053\122\054\105" +
    "\055\111\056\uffa4\057\uffa4\060\uffa4\062\uffa4\064\uffa4\100" +
    "\uffa4\001\002\000\054\021\113\022\107\023\112\024\116" +
    "\025\106\026\117\034\uffa5\035\uffa5\040\uffa5\050\110\051" +
    "\120\052\114\053\122\054\105\055\111\056\uffa5\057\uffa5" +
    "\060\104\062\uffa5\064\uffa5\100\uffa5\001\002\000\054\021" +
    "\113\022\107\023\112\024\116\025\106\026\117\034\uffa3" +
    "\035\uffa3\040\uffa3\050\110\051\120\052\114\053\122\054" +
    "\105\055\111\056\uffa3\057\uffa3\060\uffa3\062\uffa3\064\uffa3" +
    "\100\uffa3\001\002\000\032\004\066\005\072\006\067\007" +
    "\102\010\074\011\073\012\075\022\071\033\076\061\100" +
    "\102\077\103\070\001\002\000\042\021\113\022\107\023" +
    "\112\024\116\025\106\026\117\034\146\050\110\051\120" +
    "\052\114\053\122\054\105\055\111\056\121\057\103\060" +
    "\104\001\002\000\054\021\uff94\022\uff94\023\uff94\024\uff94" +
    "\025\uff94\026\uff94\034\uff94\035\uff94\040\uff94\050\uff94\051" +
    "\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94" +
    "\060\uff94\062\uff94\064\uff94\100\uff94\001\002\000\004\034" +
    "\160\001\002\000\004\034\156\001\002\000\004\034\154" +
    "\001\002\000\042\021\113\022\107\023\112\024\116\025" +
    "\106\026\117\034\153\050\110\051\120\052\114\053\122" +
    "\054\105\055\111\056\121\057\103\060\104\001\002\000" +
    "\054\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\034\uffa2\035\uffa2\040\uffa2\050\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\062\uffa2" +
    "\064\uffa2\100\uffa2\001\002\000\032\004\066\005\072\006" +
    "\067\007\102\010\074\011\073\012\075\022\071\033\076" +
    "\061\100\102\077\103\070\001\002\000\054\021\113\022" +
    "\107\023\112\024\116\025\106\026\117\034\uff9f\035\uff9f" +
    "\040\uff9f\050\110\051\120\052\114\053\122\054\105\055" +
    "\111\056\121\057\103\060\104\062\uff9f\064\uff9f\100\uff9f" +
    "\001\002\000\032\004\066\005\072\006\067\007\102\010" +
    "\074\011\073\012\075\022\071\033\076\061\100\102\077" +
    "\103\070\001\002\000\054\021\113\022\107\023\112\024" +
    "\116\025\106\026\117\034\uffa1\035\uffa1\040\uffa1\050\110" +
    "\051\120\052\114\053\122\054\105\055\111\056\121\057" +
    "\103\060\104\062\uffa1\064\uffa1\100\uffa1\001\002\000\032" +
    "\004\066\005\072\006\067\007\102\010\074\011\073\012" +
    "\075\022\071\033\076\061\100\102\077\103\070\001\002" +
    "\000\054\021\113\022\107\023\112\024\116\025\106\026" +
    "\117\034\uffa0\035\uffa0\040\uffa0\050\110\051\120\052\114" +
    "\053\122\054\105\055\111\056\121\057\103\060\104\062" +
    "\uffa0\064\uffa0\100\uffa0\001\002\000\006\044\172\104\171" +
    "\001\002\000\032\004\066\005\072\006\067\007\102\010" +
    "\074\011\073\012\075\022\071\033\076\061\100\102\077" +
    "\103\070\001\002\000\042\021\113\022\107\023\112\024" +
    "\116\025\106\026\117\040\165\050\110\051\120\052\114" +
    "\053\122\054\105\055\111\056\121\057\103\060\104\001" +
    "\002\000\056\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97" +
    "\026\uff97\034\uff97\035\uff97\037\166\040\uff97\050\uff97\051" +
    "\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97" +
    "\060\uff97\062\uff97\064\uff97\100\uff97\001\002\000\032\004" +
    "\066\005\072\006\067\007\102\010\074\011\073\012\075" +
    "\022\071\033\076\061\100\102\077\103\070\001\002\000" +
    "\042\021\113\022\107\023\112\024\116\025\106\026\117" +
    "\040\170\050\110\051\120\052\114\053\122\054\105\055" +
    "\111\056\121\057\103\060\104\001\002\000\054\021\uff96" +
    "\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\034\uff96\035" +
    "\uff96\040\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\055\uff96\056\uff96\057\uff96\060\uff96\062\uff96\064\uff96\100" +
    "\uff96\001\002\000\004\033\176\001\002\000\004\033\173" +
    "\001\002\000\032\004\066\005\072\006\067\007\102\010" +
    "\074\011\073\012\075\022\071\033\076\061\100\102\077" +
    "\103\070\001\002\000\042\021\113\022\107\023\112\024" +
    "\116\025\106\026\117\034\175\050\110\051\120\052\114" +
    "\053\122\054\105\055\111\056\121\057\103\060\104\001" +
    "\002\000\054\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\026\uff95\034\uff95\035\uff95\040\uff95\050\uff95\051\uff95\052" +
    "\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95" +
    "\062\uff95\064\uff95\100\uff95\001\002\000\032\004\066\005" +
    "\072\006\067\007\102\010\074\011\073\012\075\022\071" +
    "\033\076\061\100\102\077\103\070\001\002\000\042\021" +
    "\113\022\107\023\112\024\116\025\106\026\117\034\200" +
    "\050\110\051\120\052\114\053\122\054\105\055\111\056" +
    "\121\057\103\060\104\001\002\000\054\021\uff92\022\uff92" +
    "\023\uff92\024\uff92\025\uff92\026\uff92\034\uff92\035\uff92\040" +
    "\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92" +
    "\056\uff92\057\uff92\060\uff92\062\uff92\064\uff92\100\uff92\001" +
    "\002\000\054\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\034\uffb3\035\uffb3\040\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3" +
    "\062\uffb3\064\uffb3\100\uffb3\001\002\000\032\004\066\005" +
    "\072\006\067\007\102\010\074\011\073\012\075\022\071" +
    "\033\076\061\100\102\077\103\070\001\002\000\042\021" +
    "\113\022\107\023\112\024\116\025\106\026\117\034\204" +
    "\050\110\051\120\052\114\053\122\054\105\055\111\056" +
    "\121\057\103\060\104\001\002\000\054\021\uff93\022\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\034\uff93\035\uff93\040" +
    "\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93" +
    "\056\uff93\057\uff93\060\uff93\062\uff93\064\uff93\100\uff93\001" +
    "\002\000\010\010\210\066\010\067\056\001\002\000\004" +
    "\010\221\001\002\000\012\010\uffe0\036\uffe0\066\uffe0\067" +
    "\uffe0\001\002\000\004\063\216\001\002\000\012\010\210" +
    "\036\212\066\010\067\056\001\002\000\004\010\214\001" +
    "\002\000\012\010\uffe1\036\uffe1\066\uffe1\067\uffe1\001\002" +
    "\000\004\064\215\001\002\000\060\002\uffe2\003\uffe2\010" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\032\uffe2\036\uffe2\045\uffe2\065\uffe2\066\uffe2\067\uffe2\070" +
    "\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2" +
    "\101\uffe2\001\002\000\016\014\027\015\007\016\036\017" +
    "\041\020\005\077\035\001\002\000\004\064\220\001\002" +
    "\000\060\002\uffe6\003\uffe6\010\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\032\uffe6\036\uffe6\045\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\070\uffe6\072\uffe6\073\uffe6\074" +
    "\uffe6\075\uffe6\076\uffe6\077\uffe6\101\uffe6\001\002\000\004" +
    "\063\222\001\002\000\016\014\027\015\007\016\036\017" +
    "\041\020\005\077\035\001\002\000\006\047\225\064\224" +
    "\001\002\000\060\002\uffe7\003\uffe7\010\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\032\uffe7\036\uffe7" +
    "\045\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\072\uffe7\073" +
    "\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\101\uffe7\001\002" +
    "\000\032\004\066\005\072\006\067\007\102\010\074\011" +
    "\073\012\075\022\071\033\076\061\100\102\077\103\070" +
    "\001\002\000\042\021\113\022\107\023\112\024\116\025" +
    "\106\026\117\050\110\051\120\052\114\053\122\054\105" +
    "\055\111\056\121\057\103\060\104\064\227\001\002\000" +
    "\060\002\uffe8\003\uffe8\010\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\032\uffe8\036\uffe8\045\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\072\uffe8\073\uffe8\074\uffe8" +
    "\075\uffe8\076\uffe8\077\uffe8\101\uffe8\001\002\000\004\002" +
    "\001\001\002\000\016\014\027\015\007\016\036\017\041" +
    "\020\005\077\035\001\002\000\004\054\233\001\002\000" +
    "\004\010\234\001\002\000\004\047\235\001\002\000\004" +
    "\031\236\001\002\000\004\032\237\001\002\000\004\033" +
    "\240\001\002\000\004\034\241\001\002\000\004\064\242" +
    "\001\002\000\060\002\uffe3\003\uffe3\010\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\032\uffe3\036\uffe3" +
    "\045\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\072\uffe3\073" +
    "\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\101\uffe3\001\002" +
    "\000\032\004\066\005\072\006\067\007\102\010\074\011" +
    "\073\012\075\022\071\033\076\061\100\102\077\103\070" +
    "\001\002\000\042\021\113\022\107\023\112\024\116\025" +
    "\106\026\117\034\245\050\110\051\120\052\114\053\122" +
    "\054\105\055\111\056\121\057\103\060\104\001\002\000" +
    "\004\035\246\001\002\000\054\003\032\010\016\013\012" +
    "\014\027\015\007\016\036\017\041\020\005\032\045\045" +
    "\053\065\034\066\010\067\056\070\030\072\021\073\017" +
    "\074\044\075\057\076\014\077\035\101\043\001\002\000" +
    "\056\003\032\010\016\013\012\014\027\015\007\016\036" +
    "\017\041\020\005\032\045\036\250\045\053\065\034\066" +
    "\010\067\056\070\030\072\021\073\017\074\044\075\057" +
    "\076\014\077\035\101\043\001\002\000\060\002\uffbf\003" +
    "\uffbf\010\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\032\uffbf\036\uffbf\045\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\070\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf" +
    "\077\uffbf\101\uffbf\001\002\000\004\033\252\001\002\000" +
    "\034\004\066\005\072\006\067\007\102\010\074\011\073" +
    "\012\075\022\071\033\076\034\253\061\100\102\077\103" +
    "\070\001\002\000\004\064\262\001\002\000\006\034\257" +
    "\100\256\001\002\000\044\021\113\022\107\023\112\024" +
    "\116\025\106\026\117\034\uffb4\050\110\051\120\052\114" +
    "\053\122\054\105\055\111\056\121\057\103\060\104\100" +
    "\uffb4\001\002\000\032\004\066\005\072\006\067\007\102" +
    "\010\074\011\073\012\075\022\071\033\076\061\100\102" +
    "\077\103\070\001\002\000\004\064\260\001\002\000\060" +
    "\002\uffb9\003\uffb9\010\uffb9\013\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\032\uffb9\036\uffb9\045\uffb9\065\uffb9" +
    "\066\uffb9\067\uffb9\070\uffb9\072\uffb9\073\uffb9\074\uffb9\075" +
    "\uffb9\076\uffb9\077\uffb9\101\uffb9\001\002\000\044\021\113" +
    "\022\107\023\112\024\116\025\106\026\117\034\uffb5\050" +
    "\110\051\120\052\114\053\122\054\105\055\111\056\121" +
    "\057\103\060\104\100\uffb5\001\002\000\060\002\uffb8\003" +
    "\uffb8\010\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\032\uffb8\036\uffb8\045\uffb8\065\uffb8\066\uffb8\067" +
    "\uffb8\070\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8" +
    "\077\uffb8\101\uffb8\001\002\000\060\002\uffc1\003\uffc1\010" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\032\uffc1\036\uffc1\045\uffc1\065\uffc1\066\uffc1\067\uffc1\070" +
    "\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1" +
    "\101\uffc1\001\002\000\060\002\uffeb\003\uffeb\010\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\032\uffeb" +
    "\036\uffeb\045\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\072" +
    "\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\101\uffeb" +
    "\001\002\000\032\004\066\005\072\006\067\007\102\010" +
    "\074\011\073\012\075\022\071\033\076\061\100\102\077" +
    "\103\070\001\002\000\042\021\113\022\107\023\112\024" +
    "\116\025\106\026\117\034\267\050\110\051\120\052\114" +
    "\053\122\054\105\055\111\056\121\057\103\060\104\001" +
    "\002\000\004\035\270\001\002\000\054\003\032\010\016" +
    "\013\012\014\027\015\007\016\036\017\041\020\005\032" +
    "\045\045\053\065\034\066\010\067\056\070\030\072\021" +
    "\073\017\074\044\075\057\076\014\077\035\101\043\001" +
    "\002\000\056\003\032\010\016\013\012\014\027\015\007" +
    "\016\036\017\041\020\005\032\045\036\272\045\053\065" +
    "\034\066\010\067\056\070\030\072\021\073\017\074\044" +
    "\075\057\076\014\077\035\101\043\001\002\000\062\002" +
    "\uffcd\003\uffcd\010\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\032\uffcd\036\uffcd\045\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\071\273\072\uffcd\073\uffcd\074\uffcd" +
    "\075\uffcd\076\uffcd\077\uffcd\101\uffcd\001\002\000\006\035" +
    "\274\070\030\001\002\000\054\003\032\010\016\013\012" +
    "\014\027\015\007\016\036\017\041\020\005\032\045\045" +
    "\053\065\034\066\010\067\056\070\030\072\021\073\017" +
    "\074\044\075\057\076\014\077\035\101\043\001\002\000" +
    "\060\002\uffcb\003\uffcb\010\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\032\uffcb\036\uffcb\045\uffcb\065" +
    "\uffcb\066\uffcb\067\uffcb\070\uffcb\072\uffcb\073\uffcb\074\uffcb" +
    "\075\uffcb\076\uffcb\077\uffcb\101\uffcb\001\002\000\056\003" +
    "\032\010\016\013\012\014\027\015\007\016\036\017\041" +
    "\020\005\032\045\036\277\045\053\065\034\066\010\067" +
    "\056\070\030\072\021\073\017\074\044\075\057\076\014" +
    "\077\035\101\043\001\002\000\060\002\uffcc\003\uffcc\010" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\032\uffcc\036\uffcc\045\uffcc\065\uffcc\066\uffcc\067\uffcc\070" +
    "\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc" +
    "\101\uffcc\001\002\000\004\063\301\001\002\000\016\014" +
    "\027\015\007\016\036\017\041\020\005\077\035\001\002" +
    "\000\010\037\303\047\225\064\224\001\002\000\004\040" +
    "\304\001\002\000\006\037\305\047\306\001\002\000\004" +
    "\040\316\001\002\000\004\037\307\001\002\000\032\004" +
    "\066\005\072\006\067\007\102\010\074\011\073\012\075" +
    "\022\071\033\076\061\100\102\077\103\070\001\002\000" +
    "\044\021\113\022\107\023\112\024\116\025\106\026\117" +
    "\040\uffde\050\110\051\120\052\114\053\122\054\105\055" +
    "\111\056\121\057\103\060\104\100\uffde\001\002\000\006" +
    "\040\313\100\312\001\002\000\032\004\066\005\072\006" +
    "\067\007\102\010\074\011\073\012\075\022\071\033\076" +
    "\061\100\102\077\103\070\001\002\000\004\064\314\001" +
    "\002\000\060\002\uffe5\003\uffe5\010\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\032\uffe5\036\uffe5\045" +
    "\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\072\uffe5\073\uffe5" +
    "\074\uffe5\075\uffe5\076\uffe5\077\uffe5\101\uffe5\001\002\000" +
    "\044\021\113\022\107\023\112\024\116\025\106\026\117" +
    "\040\uffdf\050\110\051\120\052\114\053\122\054\105\055" +
    "\111\056\121\057\103\060\104\100\uffdf\001\002\000\004" +
    "\047\317\001\002\000\004\037\320\001\002\000\004\037" +
    "\322\001\002\000\006\040\326\100\325\001\002\000\032" +
    "\004\066\005\072\006\067\007\102\010\074\011\073\012" +
    "\075\022\071\033\076\061\100\102\077\103\070\001\002" +
    "\000\006\040\324\100\312\001\002\000\006\040\uffdc\100" +
    "\uffdc\001\002\000\004\037\330\001\002\000\004\064\327" +
    "\001\002\000\060\002\uffe4\003\uffe4\010\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\032\uffe4\036\uffe4" +
    "\045\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\072\uffe4\073" +
    "\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\101\uffe4\001\002" +
    "\000\032\004\066\005\072\006\067\007\102\010\074\011" +
    "\073\012\075\022\071\033\076\061\100\102\077\103\070" +
    "\001\002\000\006\040\332\100\312\001\002\000\006\040" +
    "\uffdd\100\uffdd\001\002\000\042\021\113\022\107\023\112" +
    "\024\116\025\106\026\117\035\334\050\110\051\120\052" +
    "\114\053\122\054\105\055\111\056\121\057\103\060\104" +
    "\001\002\000\034\004\066\005\072\006\067\007\102\010" +
    "\074\011\073\012\075\022\071\033\076\041\335\061\100" +
    "\102\077\103\070\001\002\000\004\062\347\001\002\000" +
    "\036\004\066\005\072\006\067\007\102\010\074\011\073" +
    "\012\075\022\071\033\076\036\345\041\335\061\100\102" +
    "\077\103\070\001\002\000\036\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\012\uffc8\022\uffc8\033\uffc8\036" +
    "\uffc8\041\uffc8\061\uffc8\102\uffc8\103\uffc8\001\002\000\042" +
    "\021\113\022\107\023\112\024\116\025\106\026\117\050" +
    "\110\051\120\052\114\053\122\054\105\055\111\056\121" +
    "\057\103\060\104\062\341\001\002\000\004\035\342\001" +
    "\002\000\054\003\032\010\016\013\012\014\027\015\007" +
    "\016\036\017\041\020\005\032\045\045\053\065\034\066" +
    "\010\067\056\070\030\072\021\073\017\074\044\075\057" +
    "\076\014\077\035\101\043\001\002\000\056\003\032\010" +
    "\016\013\012\014\027\015\007\016\036\017\041\020\005" +
    "\032\045\036\344\045\053\065\034\066\010\067\056\070" +
    "\030\072\021\073\017\074\044\075\057\076\014\077\035" +
    "\101\043\001\002\000\036\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\022\uffc7\033\uffc7\036\uffc7" +
    "\041\uffc7\061\uffc7\102\uffc7\103\uffc7\001\002\000\060\002" +
    "\uffca\003\uffca\010\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\032\uffca\036\uffca\045\uffca\065\uffca\066" +
    "\uffca\067\uffca\070\uffca\072\uffca\073\uffca\074\uffca\075\uffca" +
    "\076\uffca\077\uffca\101\uffca\001\002\000\036\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\022\uffc9" +
    "\033\uffc9\036\uffc9\041\uffc9\061\uffc9\102\uffc9\103\uffc9\001" +
    "\002\000\004\035\350\001\002\000\054\003\032\010\016" +
    "\013\012\014\027\015\007\016\036\017\041\020\005\032" +
    "\045\045\053\065\034\066\010\067\056\070\030\072\021" +
    "\073\017\074\044\075\057\076\014\077\035\101\043\001" +
    "\002\000\056\003\032\010\016\013\012\014\027\015\007" +
    "\016\036\017\041\020\005\032\045\036\352\045\053\065" +
    "\034\066\010\067\056\070\030\072\021\073\017\074\044" +
    "\075\057\076\014\077\035\101\043\001\002\000\036\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\022\uffc6\033\uffc6\036\uffc6\041\uffc6\061\uffc6\102\uffc6\103" +
    "\uffc6\001\002\000\004\010\355\001\002\000\032\004\066" +
    "\005\072\006\067\007\102\010\074\011\073\012\075\022" +
    "\071\033\076\061\100\102\077\103\070\001\002\000\010" +
    "\027\360\030\356\047\357\001\002\000\004\064\364\001" +
    "\002\000\032\004\066\005\072\006\067\007\102\010\074" +
    "\011\073\012\075\022\071\033\076\061\100\102\077\103" +
    "\070\001\002\000\004\064\361\001\002\000\106\002\uffd8" +
    "\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\022\uffd8\032\uffd8\033\uffd8\036\uffd8\045\uffd8\061" +
    "\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\072\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\076\uffd8\077\uffd8\101\uffd8\102\uffd8\103" +
    "\uffd8\001\002\000\042\021\113\022\107\023\112\024\116" +
    "\025\106\026\117\050\110\051\120\052\114\053\122\054" +
    "\105\055\111\056\121\057\103\060\104\064\363\001\002" +
    "\000\106\002\uffd9\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\022\uffd9\032\uffd9\033\uffd9\036" +
    "\uffd9\045\uffd9\061\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9" +
    "\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\101" +
    "\uffd9\102\uffd9\103\uffd9\001\002\000\106\002\uffd7\003\uffd7" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\022\uffd7\032\uffd7\033\uffd7\036\uffd7\045\uffd7\061\uffd7\065" +
    "\uffd7\066\uffd7\067\uffd7\070\uffd7\072\uffd7\073\uffd7\074\uffd7" +
    "\075\uffd7\076\uffd7\077\uffd7\101\uffd7\102\uffd7\103\uffd7\001" +
    "\002\000\042\021\113\022\107\023\112\024\116\025\106" +
    "\026\117\050\110\051\120\052\114\053\122\054\105\055" +
    "\111\056\121\057\103\060\104\064\366\001\002\000\004" +
    "\010\367\001\002\000\010\027\377\030\375\047\376\001" +
    "\002\000\004\034\371\001\002\000\004\035\372\001\002" +
    "\000\054\003\032\010\016\013\012\014\027\015\007\016" +
    "\036\017\041\020\005\032\045\045\053\065\034\066\010" +
    "\067\056\070\030\072\021\073\017\074\044\075\057\076" +
    "\014\077\035\101\043\001\002\000\056\003\032\010\016" +
    "\013\012\014\027\015\007\016\036\017\041\020\005\032" +
    "\045\036\374\045\053\065\034\066\010\067\056\070\030" +
    "\072\021\073\017\074\044\075\057\076\014\077\035\101" +
    "\043\001\002\000\060\002\uffc5\003\uffc5\010\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\032\uffc5\036" +
    "\uffc5\045\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\072\uffc5" +
    "\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\101\uffc5\001" +
    "\002\000\004\034\uffc2\001\002\000\032\004\066\005\072" +
    "\006\067\007\102\010\074\011\073\012\075\022\071\033" +
    "\076\061\100\102\077\103\070\001\002\000\004\034\uffc3" +
    "\001\002\000\042\021\113\022\107\023\112\024\116\025" +
    "\106\026\117\034\uffc4\050\110\051\120\052\114\053\122" +
    "\054\105\055\111\056\121\057\103\060\104\001\002\000" +
    "\004\043\u0114\001\002\000\032\004\066\005\072\006\067" +
    "\007\102\010\074\011\073\012\075\022\071\033\076\061" +
    "\100\102\077\103\070\001\002\000\034\004\066\005\072" +
    "\006\067\007\102\010\074\011\073\012\075\022\071\033" +
    "\076\034\u0104\061\100\102\077\103\070\001\002\000\004" +
    "\064\u0108\001\002\000\006\034\u0106\100\256\001\002\000" +
    "\004\064\u0107\001\002\000\060\002\uffb7\003\uffb7\010\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\032" +
    "\uffb7\036\uffb7\045\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7" +
    "\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\101" +
    "\uffb7\001\002\000\060\002\uffb6\003\uffb6\010\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\032\uffb6\036" +
    "\uffb6\045\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\072\uffb6" +
    "\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\101\uffb6\001" +
    "\002\000\042\021\113\022\107\023\112\024\116\025\106" +
    "\026\117\040\u010a\050\110\051\120\052\114\053\122\054" +
    "\105\055\111\056\121\057\103\060\104\001\002\000\006" +
    "\037\u010c\047\u010b\001\002\000\032\004\066\005\072\006" +
    "\067\007\102\010\074\011\073\012\075\022\071\033\076" +
    "\061\100\102\077\103\070\001\002\000\032\004\066\005" +
    "\072\006\067\007\102\010\074\011\073\012\075\022\071" +
    "\033\076\061\100\102\077\103\070\001\002\000\042\021" +
    "\113\022\107\023\112\024\116\025\106\026\117\040\u010e" +
    "\050\110\051\120\052\114\053\122\054\105\055\111\056" +
    "\121\057\103\060\104\001\002\000\004\047\u010f\001\002" +
    "\000\032\004\066\005\072\006\067\007\102\010\074\011" +
    "\073\012\075\022\071\033\076\061\100\102\077\103\070" +
    "\001\002\000\042\021\113\022\107\023\112\024\116\025" +
    "\106\026\117\050\110\051\120\052\114\053\122\054\105" +
    "\055\111\056\121\057\103\060\104\064\u0111\001\002\000" +
    "\060\002\uffd5\003\uffd5\010\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\032\uffd5\036\uffd5\045\uffd5\065" +
    "\uffd5\066\uffd5\067\uffd5\070\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\075\uffd5\076\uffd5\077\uffd5\101\uffd5\001\002\000\042\021" +
    "\113\022\107\023\112\024\116\025\106\026\117\050\110" +
    "\051\120\052\114\053\122\054\105\055\111\056\121\057" +
    "\103\060\104\064\u0113\001\002\000\060\002\uffd6\003\uffd6" +
    "\010\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\032\uffd6\036\uffd6\045\uffd6\065\uffd6\066\uffd6\067\uffd6" +
    "\070\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077" +
    "\uffd6\101\uffd6\001\002\000\004\033\u0115\001\002\000\032" +
    "\004\066\005\072\006\067\007\102\010\074\011\073\012" +
    "\075\022\071\033\076\061\100\102\077\103\070\001\002" +
    "\000\042\021\113\022\107\023\112\024\116\025\106\026" +
    "\117\034\u0117\050\110\051\120\052\114\053\122\054\105" +
    "\055\111\056\121\057\103\060\104\001\002\000\004\064" +
    "\u0118\001\002\000\060\002\uffd4\003\uffd4\010\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\032\uffd4\036" +
    "\uffd4\045\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\072\uffd4" +
    "\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\101\uffd4\001" +
    "\002\000\060\002\uffc0\003\uffc0\010\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\020\uffc0\032\uffc0\036\uffc0\045" +
    "\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\072\uffc0\073\uffc0" +
    "\074\uffc0\075\uffc0\076\uffc0\077\uffc0\101\uffc0\001\002\000" +
    "\032\004\066\005\072\006\067\007\102\010\074\011\073" +
    "\012\075\022\071\033\076\061\100\102\077\103\070\001" +
    "\002\000\042\021\113\022\107\023\112\024\116\025\106" +
    "\026\117\034\u011c\050\110\051\120\052\114\053\122\054" +
    "\105\055\111\056\121\057\103\060\104\001\002\000\004" +
    "\064\u011d\001\002\000\060\002\uffe9\003\uffe9\010\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\032\uffe9" +
    "\036\uffe9\045\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\072" +
    "\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\101\uffe9" +
    "\001\002\000\004\033\u011f\001\002\000\020\014\027\015" +
    "\007\016\036\017\041\020\005\034\u0121\077\035\001\002" +
    "\000\006\034\u0128\100\u0127\001\002\000\004\035\u0124\001" +
    "\002\000\004\010\u0123\001\002\000\006\034\uffba\100\uffba" +
    "\001\002\000\054\003\032\010\016\013\012\014\027\015" +
    "\007\016\036\017\041\020\005\032\045\045\053\065\034" +
    "\066\010\067\056\070\030\072\021\073\017\074\044\075" +
    "\057\076\014\077\035\101\043\001\002\000\056\003\032" +
    "\010\016\013\012\014\027\015\007\016\036\017\041\020" +
    "\005\032\045\036\u0126\045\053\065\034\066\010\067\056" +
    "\070\030\072\021\073\017\074\044\075\057\076\014\077" +
    "\035\101\043\001\002\000\060\002\uffbc\003\uffbc\010\uffbc" +
    "\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\032" +
    "\uffbc\036\uffbc\045\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc" +
    "\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\101" +
    "\uffbc\001\002\000\016\014\027\015\007\016\036\017\041" +
    "\020\005\077\035\001\002\000\004\035\u0129\001\002\000" +
    "\054\003\032\010\016\013\012\014\027\015\007\016\036" +
    "\017\041\020\005\032\045\045\053\065\034\066\010\067" +
    "\056\070\030\072\021\073\017\074\044\075\057\076\014" +
    "\077\035\101\043\001\002\000\056\003\032\010\016\013" +
    "\012\014\027\015\007\016\036\017\041\020\005\032\045" +
    "\036\u012b\045\053\065\034\066\010\067\056\070\030\072" +
    "\021\073\017\074\044\075\057\076\014\077\035\101\043" +
    "\001\002\000\060\002\uffbd\003\uffbd\010\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\032\uffbd\036\uffbd" +
    "\045\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\072\uffbd\073" +
    "\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\101\uffbd\001\002" +
    "\000\004\010\u012d\001\002\000\006\034\uffbb\100\uffbb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\060\002\051\003\017\006\014\007\045\010" +
    "\037\011\036\012\046\013\010\014\041\016\023\017\050" +
    "\020\053\021\054\022\005\023\025\025\012\027\030\032" +
    "\003\033\021\034\022\037\032\040\024\041\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\006\061" +
    "\007\045\010\037\011\036\012\046\013\010\014\041\016" +
    "\023\017\050\020\053\021\054\022\005\023\025\025\012" +
    "\027\030\032\003\033\021\034\022\037\032\040\024\041" +
    "\047\001\001\000\004\024\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\060\006\014\007\045\010\037\011\036\012\046" +
    "\013\010\014\041\016\023\017\050\020\053\021\054\022" +
    "\005\023\025\025\012\027\030\032\003\033\021\034\022" +
    "\037\032\040\024\041\047\001\001\000\054\006\061\007" +
    "\045\010\037\011\036\012\046\013\010\014\041\016\023" +
    "\017\050\020\053\021\054\022\005\023\025\025\012\027" +
    "\030\032\003\033\021\034\022\037\032\040\024\041\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\151\001\001\000\002\001\001\000" +
    "\004\024\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\141\001\001\000\004\024\140\001\001\000" +
    "\004\024\137\001\001\000\004\024\136\001\001\000\004" +
    "\024\135\001\001\000\004\024\134\001\001\000\004\024" +
    "\133\001\001\000\004\024\132\001\001\000\004\024\131" +
    "\001\001\000\004\024\130\001\001\000\002\001\001\000" +
    "\004\024\126\001\001\000\004\024\125\001\001\000\004" +
    "\024\124\001\001\000\004\024\123\001\001\000\004\024" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\154\001\001\000\002\001\001\000\004" +
    "\024\156\001\001\000\002\001\001\000\004\024\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\206\023\205\031\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\212" +
    "\023\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\246" +
    "\006\014\007\045\010\037\011\036\012\046\013\010\014" +
    "\041\016\023\017\050\020\053\021\054\022\005\023\025" +
    "\025\012\027\030\032\003\033\021\034\022\037\032\040" +
    "\024\041\047\001\001\000\054\006\061\007\045\010\037" +
    "\011\036\012\046\013\010\014\041\016\023\017\050\020" +
    "\053\021\054\022\005\023\025\025\012\027\030\032\003" +
    "\033\021\034\022\037\032\040\024\041\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\254\030\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\270\006\014\007" +
    "\045\010\037\011\036\012\046\013\010\014\041\016\023" +
    "\017\050\020\053\021\054\022\005\023\025\025\012\027" +
    "\030\032\003\033\021\034\022\037\032\040\024\041\047" +
    "\001\001\000\054\006\061\007\045\010\037\011\036\012" +
    "\046\013\010\014\041\016\023\017\050\020\053\021\054" +
    "\022\005\023\025\025\012\027\030\032\003\033\021\034" +
    "\022\037\032\040\024\041\047\001\001\000\002\001\001" +
    "\000\004\012\274\001\001\000\056\003\275\006\014\007" +
    "\045\010\037\011\036\012\046\013\010\014\041\016\023" +
    "\017\050\020\053\021\054\022\005\023\025\025\012\027" +
    "\030\032\003\033\021\034\022\037\032\040\024\041\047" +
    "\001\001\000\002\001\001\000\054\006\061\007\045\010" +
    "\037\011\036\012\046\013\010\014\041\016\023\017\050" +
    "\020\053\021\054\022\005\023\025\025\012\027\030\032" +
    "\003\033\021\034\022\037\032\040\024\041\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\307\035" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\320\001\001\000\002\001\001\000\006\024\307\035" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\307\035\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\335\005\336\024\337\001" +
    "\001\000\002\001\001\000\006\005\345\024\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\342\006\014\007\045\010\037\011\036\012\046" +
    "\013\010\014\041\016\023\017\050\020\053\021\054\022" +
    "\005\023\025\025\012\027\030\032\003\033\021\034\022" +
    "\037\032\040\024\041\047\001\001\000\054\006\061\007" +
    "\045\010\037\011\036\012\046\013\010\014\041\016\023" +
    "\017\050\020\053\021\054\022\005\023\025\025\012\027" +
    "\030\032\003\033\021\034\022\037\032\040\024\041\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\350\006\014\007\045" +
    "\010\037\011\036\012\046\013\010\014\041\016\023\017" +
    "\050\020\053\021\054\022\005\023\025\025\012\027\030" +
    "\032\003\033\021\034\022\037\032\040\024\041\047\001" +
    "\001\000\054\006\061\007\045\010\037\011\036\012\046" +
    "\013\010\014\041\016\023\017\050\020\053\021\054\022" +
    "\005\023\025\025\012\027\030\032\003\033\021\034\022" +
    "\037\032\040\024\041\047\001\001\000\002\001\001\000" +
    "\004\011\353\001\001\000\004\024\364\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\361\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\372\006\014\007\045\010\037\011" +
    "\036\012\046\013\010\014\041\016\023\017\050\020\053" +
    "\021\054\022\005\023\025\025\012\027\030\032\003\033" +
    "\021\034\022\037\032\040\024\041\047\001\001\000\054" +
    "\006\061\007\045\010\037\011\036\012\046\013\010\014" +
    "\041\016\023\017\050\020\053\021\054\022\005\023\025" +
    "\025\012\027\030\032\003\033\021\034\022\037\032\040" +
    "\024\041\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u0108\001\001\000\006" +
    "\024\254\030\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u0111\001" +
    "\001\000\004\024\u010c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u010f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\u011a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\u0121\026\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\u0124\006\014\007\045" +
    "\010\037\011\036\012\046\013\010\014\041\016\023\017" +
    "\050\020\053\021\054\022\005\023\025\025\012\027\030" +
    "\032\003\033\021\034\022\037\032\040\024\041\047\001" +
    "\001\000\054\006\061\007\045\010\037\011\036\012\046" +
    "\013\010\014\041\016\023\017\050\020\053\021\054\022" +
    "\005\023\025\025\012\027\030\032\003\033\021\034\022" +
    "\037\032\040\024\041\047\001\001\000\002\001\001\000" +
    "\004\022\u012b\001\001\000\002\001\001\000\056\003\u0129" +
    "\006\014\007\045\010\037\011\036\012\046\013\010\014" +
    "\041\016\023\017\050\020\053\021\054\022\005\023\025" +
    "\025\012\027\030\032\003\033\021\034\022\037\032\040" +
    "\024\041\047\001\001\000\054\006\061\007\045\010\037" +
    "\011\036\012\046\013\010\014\041\016\023\017\050\020" +
    "\053\021\054\022\005\023\025\025\012\027\030\032\003" +
    "\033\021\034\022\037\032\040\024\041\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CDO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SALIDA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CONTINIU 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= Start_WITH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= DECLARACION_VECTORES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= ASIGNACION_VECT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= DECLARACION_LISTASDIN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= ASIGNACION_LISTADIN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= DECLARACION_STRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(d, b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(d, b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= ID_VARIABLE DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_VECTORES ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS COR1 COR2 IGUAL COR1 LISTAVALORES1 COR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                                                                                                                    RESULT = new Declaracion_Vectores(b, d, null, a, c, aleft, aright);
                                                                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_VECTORES ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS COR1 COR2 COR1 COR2 IGUAL COR1 LISTAVALORES2 COR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> d = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                LinkedList<LinkedList<Instruccion>> valores_2D = d;
                RESULT = new Declaracion_Vectores(b, null, valores_2D, a, c, aleft, aright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_LISTASDIN ::= LIST MENOR_QUE TIPOS MAYOR_QUE ID_VARIABLE IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 RESULT = new Declaracion_LDinamicas(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTASDIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_STRUCT ::= STRUCT LLAV1 LISTA_DECLARACIONES LLAV2 ID_VARIABLE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion_Struct(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA_DECLARACIONES ::= LISTA_DECLARACIONES DECLARACION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_DECLARACIONES ::= DECLARACION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTAVALORES1 ::= LISTAVALORES1 COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTAVALORES1 ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTAVALORES2 ::= LISTAVALORES2 COMA COR1 LISTAVALORES1 COR2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTAVALORES2 ::= COR1 LISTAVALORES1 COR2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MUTABILIDAD ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MUTABILIDAD ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= ID_VARIABLE IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION ::= ID_VARIABLE INCREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.INCREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION ::= ID_VARIABLE DECREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.DECREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION_VECT ::= ID_VARIABLE COR1 EXPRESION COR2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVec(a, b, null, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECT",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION_VECT ::= ID_VARIABLE COR1 EXPRESION COR2 COR1 EXPRESION COR2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVec(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECT",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION_LISTADIN ::= ID_VARIABLE PUNTO APPEND PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AsignacionLista(a, b, null, OperadoresLista.ADD, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_LISTADIN",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOS ::= TYPE_INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOS ::= TYPE_DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPOS ::= TYPE_STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPOS ::= TYPE_CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPOS ::= TYPE_BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SIF ::= IF PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SIF ::= IF PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 ELSE LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c,  aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SIF ::= IF PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF_ELSE_IF(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SMATCH ::= MATCH EXPRESION LLAV1 CASES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Cases_Match> b = (LinkedList<Cases_Match>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASES ::= CASES CASE 
            {
              LinkedList<Cases_Match> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Cases_Match> a = (LinkedList<Cases_Match>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cases_Match b = (Cases_Match)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASES ::= CASE 
            {
              LinkedList<Cases_Match> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cases_Match a = (Cases_Match)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASE ::= EXPRESION FLECHA LLAV1 INSTRUCCIONES LLAV2 
            {
              Cases_Match RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Cases_Match(a, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASE ::= DEFAULT_MATCH FLECHA LLAV1 INSTRUCCIONES LLAV2 
            {
              Cases_Match RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Cases_Match(null, a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ACTUALIZA_FOR ::= ID_VARIABLE IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ACTUALIZA_FOR ::= ID_VARIABLE INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.INCREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ACTUALIZA_FOR ::= ID_VARIABLE DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.DECREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SALIDA ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SALIDA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTINIU ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINIU",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CDO_WHILE ::= DO LLAV1 INSTRUCCIONES LLAV2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Do_While(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDO_WHILE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // METODO ::= TIPOS ID_VARIABLE PAR1 PARAMS PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, p, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // METODO ::= TIPOS ID_VARIABLE PAR1 PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAMS ::= PARAMS COMA TIPOS ID_VARIABLE 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                                RESULT = a;
                                                                var hm2 = new HashMap<String, Object>();
                                                                hm2.put("id", c);
                                                                hm2.put("tipo", b);
                                                                RESULT.add(hm2);
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMS ::= TIPOS ID_VARIABLE 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>();
                                                                var hm = new HashMap<String, Object>();
                                                                hm.put("id",b);
                                                                hm.put("tipo",a); 
                                                                RESULT.add(hm);
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Start_WITH ::= START_WITH ID_VARIABLE PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Execute(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Start_WITH",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Start_WITH ::= START_WITH ID_VARIABLE PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Execute(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Start_WITH",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LLAMADA ::= ID_VARIABLE PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Llamada(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LLAMADA ::= ID_VARIABLE PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Llamada(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        RESULT = a; 
                                                        RESULT.add(b);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        RESULT = new LinkedList<Instruccion>(); 
                                                        RESULT.add(a);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION IGUAL_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION DIFERENTE_DE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION MENOR_QUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION MAYOR_QUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= PAR1 TYPE_INT PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, OperadoresCasteo.INT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= PAR1 TYPE_DOUBLE PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, OperadoresCasteo.DOUBLE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= PAR1 TYPE_CHAR PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, OperadoresCasteo.CHAR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Double.valueOf(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= CHAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a.charAt(1), new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= ID_VARIABLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= ID_VARIABLE COR1 EXPRESION COR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVec(a, b, null, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= ID_VARIABLE COR1 EXPRESION COR2 COR1 EXPRESION COR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVec(a, b, c, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= ID_VARIABLE PUNTO REMOVE PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionLista(a, null, b, OperadoresLista.REMOVE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= ROUND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Round(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= LENGTH PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Length(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= ID_VARIABLE PUNTO FIND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Find(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
