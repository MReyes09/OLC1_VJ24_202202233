
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;
import java.util.ArrayList;
import instrucciones.Print;
import instrucciones.Round;
import instrucciones.Length;
import instrucciones.Find;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.sentencias_Control.If;
import instrucciones.sentencias_Control.IF_ELSE_IF;
import instrucciones.sentencias_Control.Match;
import instrucciones.sentencias_Control.Cases_Match;
import instrucciones.sentencias_Ciclicas.For;
import instrucciones.sentencias_Ciclicas.While;
import instrucciones.sentencias_Ciclicas.Do_While;
import instrucciones.sentencias_Transferencia.Break;
import instrucciones.sentencias_Transferencia.Continue;
import instrucciones.subrutina.Metodo;
import instrucciones.subrutina.Execute;
import instrucciones.vectores.Declaracion_Vectores;
import instrucciones.vectores.AsignacionVec;
import instrucciones.listas.Declaracion_LDinamicas;
import instrucciones.listas.AsignacionLista;
import instrucciones.listas.OperadoresLista;
import instrucciones.subrutina.Llamada;
import instrucciones.struct.Declaracion_Struct;
import instrucciones.struct.Instancia_Struct;
import instrucciones.struct.Asignacion_Struct;
import expresiones.Nativo;
import expresiones.aritmeticas.Aritmeticas;
import expresiones.aritmeticas.OperadoresAritmeticos;
import expresiones.relacionales.OperadoresRelacionales;
import expresiones.relacionales.Relacionales;
import expresiones.logicas.OperadoresLogicos;
import expresiones.logicas.Logicas;
import expresiones.casteo.Casteos;
import expresiones.casteo.OperadoresCasteo;
import expresiones.variable.AccesoVar;
import expresiones.variable.OperadoresVariable;
import expresiones.vectores.AccesoVec;
import expresiones.struct.AccesoStruct;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\004\000\002" +
    "\006\003\000\002\007\007\000\002\010\011\000\002\010" +
    "\007\000\002\010\006\000\002\010\006\000\002\032\015" +
    "\000\002\032\017\000\002\033\015\000\002\034\010\000" +
    "\002\042\013\000\002\043\007\000\002\043\005\000\002" +
    "\031\004\000\002\031\003\000\002\035\005\000\002\035" +
    "\003\000\002\036\007\000\002\036\005\000\002\023\003" +
    "\000\002\023\003\000\002\011\006\000\002\011\005\000" +
    "\002\011\005\000\002\037\011\000\002\037\014\000\002" +
    "\040\011\000\002\044\010\000\002\044\012\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\012\011\000" +
    "\002\012\015\000\002\012\013\000\002\013\007\000\002" +
    "\004\004\000\002\004\003\000\002\005\007\000\002\005" +
    "\007\000\002\014\014\000\002\015\005\000\002\015\004" +
    "\000\002\015\004\000\002\020\004\000\002\021\004\000" +
    "\002\016\011\000\002\017\013\000\002\025\012\000\002" +
    "\025\011\000\002\026\006\000\002\026\004\000\002\027" +
    "\010\000\002\027\007\000\002\041\007\000\002\041\006" +
    "\000\002\030\005\000\002\030\003\000\002\024\004\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\004\000\002" +
    "\024\005\000\002\024\006\000\002\024\006\000\002\024" +
    "\006\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\006\000\002\024\011\000\002" +
    "\024\010\000\002\024\006\000\002\024\006\000\002\024" +
    "\010\000\002\024\005\000\002\024\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\054\003\033\010\016\013\012\014\027\015" +
    "\007\016\041\017\043\020\005\032\047\045\056\065\035" +
    "\066\010\067\060\070\030\072\021\073\017\074\046\075" +
    "\061\076\014\077\037\101\045\001\002\000\060\002\ufff1" +
    "\003\ufff1\010\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\032\ufff1\036\ufff1\045\ufff1\065\ufff1\066\ufff1" +
    "\067\ufff1\070\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076" +
    "\ufff1\077\ufff1\101\ufff1\001\002\000\014\010\uffc7\037\uffc7" +
    "\047\uffc7\054\uffc7\064\uffc7\001\002\000\004\010\u013b\001" +
    "\002\000\014\010\uffca\037\uffca\047\uffca\054\uffca\064\uffca" +
    "\001\002\000\004\010\uffd4\001\002\000\060\002\ufff4\003" +
    "\ufff4\010\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\032\ufff4\036\ufff4\045\ufff4\065\ufff4\066\ufff4\067" +
    "\ufff4\070\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4" +
    "\077\ufff4\101\ufff4\001\002\000\004\033\u0137\001\002\000" +
    "\060\002\ufff3\003\ufff3\010\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\032\ufff3\036\ufff3\045\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\072\ufff3\073\ufff3\074\ufff3" +
    "\075\ufff3\076\ufff3\077\ufff3\101\ufff3\001\002\000\004\064" +
    "\u0136\001\002\000\060\002\ufffe\003\ufffe\010\ufffe\013\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\032\ufffe\036" +
    "\ufffe\045\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\072\ufffe" +
    "\073\ufffe\074\ufffe\075\ufffe\076\ufffe\077\ufffe\101\ufffe\001" +
    "\002\000\020\027\u0110\030\u010e\033\u0117\037\u0116\042\u0115" +
    "\047\u010f\063\223\001\002\000\004\033\377\001\002\000" +
    "\056\002\000\003\033\010\016\013\012\014\027\015\007" +
    "\016\041\017\043\020\005\032\047\045\056\065\035\066" +
    "\010\067\060\070\030\072\021\073\017\074\046\075\061" +
    "\076\014\077\037\101\045\001\002\000\032\004\070\005" +
    "\074\006\071\007\104\010\076\011\075\012\100\022\073" +
    "\033\077\061\102\102\101\103\072\001\002\000\060\002" +
    "\uffef\003\uffef\010\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\032\uffef\036\uffef\045\uffef\065\uffef\066" +
    "\uffef\067\uffef\070\uffef\072\uffef\073\uffef\074\uffef\075\uffef" +
    "\076\uffef\077\uffef\101\uffef\001\002\000\060\002\uffec\003" +
    "\uffec\010\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\032\uffec\036\uffec\045\uffec\065\uffec\066\uffec\067" +
    "\uffec\070\uffec\072\uffec\073\uffec\074\uffec\075\uffec\076\uffec" +
    "\077\uffec\101\uffec\001\002\000\060\002\ufff8\003\ufff8\010" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\032\ufff8\036\ufff8\045\ufff8\065\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8" +
    "\101\ufff8\001\002\000\060\002\uffee\003\uffee\010\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\032\uffee" +
    "\036\uffee\045\uffee\065\uffee\066\uffee\067\uffee\070\uffee\072" +
    "\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\101\uffee" +
    "\001\002\000\004\010\307\001\002\000\014\010\uffcb\037" +
    "\uffcb\047\uffcb\054\uffcb\064\uffcb\001\002\000\004\033\274" +
    "\001\002\000\060\002\uffea\003\uffea\010\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\032\uffea\036\uffea" +
    "\045\uffea\065\uffea\066\uffea\067\uffea\070\uffea\072\uffea\073" +
    "\uffea\074\uffea\075\uffea\076\uffea\077\uffea\101\uffea\001\002" +
    "\000\060\002\ufff2\003\ufff2\010\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\032\ufff2\036\ufff2\045\ufff2" +
    "\065\ufff2\066\ufff2\067\ufff2\070\ufff2\072\ufff2\073\ufff2\074" +
    "\ufff2\075\ufff2\076\ufff2\077\ufff2\101\ufff2\001\002\000\062" +
    "\002\uffe8\003\uffe8\010\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\032\uffe8\036\uffe8\045\uffe8\064\273" +
    "\065\uffe8\066\uffe8\067\uffe8\070\uffe8\072\uffe8\073\uffe8\074" +
    "\uffe8\075\uffe8\076\uffe8\077\uffe8\101\uffe8\001\002\000\060" +
    "\002\ufff0\003\ufff0\010\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\032\ufff0\036\ufff0\045\ufff0\065\ufff0" +
    "\066\ufff0\067\ufff0\070\ufff0\072\ufff0\073\ufff0\074\ufff0\075" +
    "\ufff0\076\ufff0\077\ufff0\101\ufff0\001\002\000\004\064\272" +
    "\001\002\000\060\002\uffeb\003\uffeb\010\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\032\uffeb\036\uffeb" +
    "\045\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\072\uffeb\073" +
    "\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\101\uffeb\001\002" +
    "\000\014\010\uffc6\037\uffc6\047\uffc6\054\uffc6\064\uffc6\001" +
    "\002\000\060\002\ufffb\003\ufffb\010\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\032\ufffb\036\ufffb\045" +
    "\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\072\ufffb\073\ufffb" +
    "\074\ufffb\075\ufffb\076\ufffb\077\ufffb\101\ufffb\001\002\000" +
    "\014\010\uffc8\037\uffc8\047\uffc8\054\uffc8\064\uffc8\001\002" +
    "\000\060\002\ufffc\003\ufffc\010\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\032\ufffc\036\ufffc\045\ufffc" +
    "\065\ufffc\066\ufffc\067\ufffc\070\ufffc\072\ufffc\073\ufffc\074" +
    "\ufffc\075\ufffc\076\ufffc\077\ufffc\101\ufffc\001\002\000\014" +
    "\010\uffc9\037\uffc9\047\uffc9\054\uffc9\064\uffc9\001\002\000" +
    "\060\002\ufff9\003\ufff9\010\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\032\ufff9\036\ufff9\045\ufff9\065" +
    "\ufff9\066\ufff9\067\ufff9\070\ufff9\072\ufff9\073\ufff9\074\ufff9" +
    "\075\ufff9\076\ufff9\077\ufff9\101\ufff9\001\002\000\004\010" +
    "\260\001\002\000\004\033\252\001\002\000\004\052\240" +
    "\001\002\000\060\002\ufffd\003\ufffd\010\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\032\ufffd\036\ufffd" +
    "\045\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\072\ufffd\073" +
    "\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\101\ufffd\001\002" +
    "\000\060\002\ufffa\003\ufffa\010\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\032\ufffa\036\ufffa\045\ufffa" +
    "\065\ufffa\066\ufffa\067\ufffa\070\ufffa\072\ufffa\073\ufffa\074" +
    "\ufffa\075\ufffa\076\ufffa\077\ufffa\101\ufffa\001\002\000\060" +
    "\002\uffed\003\uffed\010\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\032\uffed\036\uffed\045\uffed\065\uffed" +
    "\066\uffed\067\uffed\070\uffed\072\uffed\073\uffed\074\uffed\075" +
    "\uffed\076\uffed\077\uffed\101\uffed\001\002\000\060\002\ufff7" +
    "\003\ufff7\010\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\032\ufff7\036\ufff7\045\ufff7\065\ufff7\066\ufff7" +
    "\067\ufff7\070\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076" +
    "\ufff7\077\ufff7\101\ufff7\001\002\000\004\002\237\001\002" +
    "\000\060\002\ufff6\003\ufff6\010\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\032\ufff6\036\ufff6\045\ufff6" +
    "\065\ufff6\066\ufff6\067\ufff6\070\ufff6\072\ufff6\073\ufff6\074" +
    "\ufff6\075\ufff6\076\ufff6\077\ufff6\101\ufff6\001\002\000\004" +
    "\035\212\001\002\000\060\002\ufff5\003\ufff5\010\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\032\ufff5" +
    "\036\ufff5\045\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\072" +
    "\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\101\ufff5" +
    "\001\002\000\004\010\uffd5\001\002\000\004\035\062\001" +
    "\002\000\054\003\033\010\016\013\012\014\027\015\007" +
    "\016\041\017\043\020\005\032\047\045\056\065\035\066" +
    "\010\067\060\070\030\072\021\073\017\074\046\075\061" +
    "\076\014\077\037\101\045\001\002\000\056\003\033\010" +
    "\016\013\012\014\027\015\007\016\041\017\043\020\005" +
    "\032\047\036\065\045\056\065\035\066\010\067\060\070" +
    "\030\072\021\073\017\074\046\075\061\076\014\077\037" +
    "\101\045\001\002\000\060\002\uffff\003\uffff\010\uffff\013" +
    "\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff\032\uffff" +
    "\036\uffff\045\uffff\065\uffff\066\uffff\067\uffff\070\uffff\072" +
    "\uffff\073\uffff\074\uffff\075\uffff\076\uffff\077\uffff\101\uffff" +
    "\001\002\000\004\074\066\001\002\000\004\033\067\001" +
    "\002\000\032\004\070\005\074\006\071\007\104\010\076" +
    "\011\075\012\100\022\073\033\077\061\102\102\101\103" +
    "\072\001\002\000\056\021\uff94\022\uff94\023\uff94\024\uff94" +
    "\025\uff94\026\uff94\034\uff94\035\uff94\036\uff94\040\uff94\050" +
    "\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94" +
    "\057\uff94\060\uff94\062\uff94\064\uff94\100\uff94\001\002\000" +
    "\056\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95" +
    "\034\uff95\035\uff95\036\uff95\040\uff95\050\uff95\051\uff95\052" +
    "\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95" +
    "\062\uff95\064\uff95\100\uff95\001\002\000\004\033\207\001" +
    "\002\000\032\004\070\005\074\006\071\007\104\010\076" +
    "\011\075\012\100\022\073\033\077\061\102\102\101\103" +
    "\072\001\002\000\056\021\uff96\022\uff96\023\uff96\024\uff96" +
    "\025\uff96\026\uff96\034\uff96\035\uff96\036\uff96\040\uff96\050" +
    "\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96" +
    "\057\uff96\060\uff96\062\uff96\064\uff96\100\uff96\001\002\000" +
    "\056\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93" +
    "\034\uff93\035\uff93\036\uff93\040\uff93\050\uff93\051\uff93\052" +
    "\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93\060\uff93" +
    "\062\uff93\064\uff93\100\uff93\001\002\000\062\021\uff90\022" +
    "\uff90\023\uff90\024\uff90\025\uff90\026\uff90\034\uff90\035\uff90" +
    "\036\uff90\037\165\040\uff90\042\164\050\uff90\051\uff90\052" +
    "\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90" +
    "\062\uff90\064\uff90\100\uff90\001\002\000\040\004\070\005" +
    "\074\006\071\007\104\010\076\011\075\012\100\014\152" +
    "\015\151\016\153\022\073\033\077\061\102\102\101\103" +
    "\072\001\002\000\056\021\uff92\022\uff92\023\uff92\024\uff92" +
    "\025\uff92\026\uff92\034\uff92\035\uff92\036\uff92\040\uff92\050" +
    "\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92" +
    "\057\uff92\060\uff92\062\uff92\064\uff92\100\uff92\001\002\000" +
    "\004\033\146\001\002\000\032\004\070\005\074\006\071" +
    "\007\104\010\076\011\075\012\100\022\073\033\077\061" +
    "\102\102\101\103\072\001\002\000\042\021\115\022\110" +
    "\023\114\024\120\025\107\026\121\034\117\050\112\051" +
    "\122\052\116\053\124\054\111\055\113\056\123\057\105" +
    "\060\106\001\002\000\056\021\uff91\022\uff91\023\uff91\024" +
    "\uff91\025\uff91\026\uff91\034\uff91\035\uff91\036\uff91\040\uff91" +
    "\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056" +
    "\uff91\057\uff91\060\uff91\062\uff91\064\uff91\100\uff91\001\002" +
    "\000\032\004\070\005\074\006\071\007\104\010\076\011" +
    "\075\012\100\022\073\033\077\061\102\102\101\103\072" +
    "\001\002\000\032\004\070\005\074\006\071\007\104\010" +
    "\076\011\075\012\100\022\073\033\077\061\102\102\101" +
    "\103\072\001\002\000\032\004\070\005\074\006\071\007" +
    "\104\010\076\011\075\012\100\022\073\033\077\061\102" +
    "\102\101\103\072\001\002\000\032\004\070\005\074\006" +
    "\071\007\104\010\076\011\075\012\100\022\073\033\077" +
    "\061\102\102\101\103\072\001\002\000\032\004\070\005" +
    "\074\006\071\007\104\010\076\011\075\012\100\022\073" +
    "\033\077\061\102\102\101\103\072\001\002\000\032\004" +
    "\070\005\074\006\071\007\104\010\076\011\075\012\100" +
    "\022\073\033\077\061\102\102\101\103\072\001\002\000" +
    "\032\004\070\005\074\006\071\007\104\010\076\011\075" +
    "\012\100\022\073\033\077\061\102\102\101\103\072\001" +
    "\002\000\032\004\070\005\074\006\071\007\104\010\076" +
    "\011\075\012\100\022\073\033\077\061\102\102\101\103" +
    "\072\001\002\000\032\004\070\005\074\006\071\007\104" +
    "\010\076\011\075\012\100\022\073\033\077\061\102\102" +
    "\101\103\072\001\002\000\032\004\070\005\074\006\071" +
    "\007\104\010\076\011\075\012\100\022\073\033\077\061" +
    "\102\102\101\103\072\001\002\000\004\064\132\001\002" +
    "\000\032\004\070\005\074\006\071\007\104\010\076\011" +
    "\075\012\100\022\073\033\077\061\102\102\101\103\072" +
    "\001\002\000\032\004\070\005\074\006\071\007\104\010" +
    "\076\011\075\012\100\022\073\033\077\061\102\102\101" +
    "\103\072\001\002\000\032\004\070\005\074\006\071\007" +
    "\104\010\076\011\075\012\100\022\073\033\077\061\102" +
    "\102\101\103\072\001\002\000\032\004\070\005\074\006" +
    "\071\007\104\010\076\011\075\012\100\022\073\033\077" +
    "\061\102\102\101\103\072\001\002\000\032\004\070\005" +
    "\074\006\071\007\104\010\076\011\075\012\100\022\073" +
    "\033\077\061\102\102\101\103\072\001\002\000\056\021" +
    "\115\022\110\023\114\024\120\025\107\026\121\034\uffa1" +
    "\035\uffa1\036\uffa1\040\uffa1\050\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\062\uffa1" +
    "\064\uffa1\100\uffa1\001\002\000\056\021\115\022\110\023" +
    "\114\024\120\025\107\026\121\034\uff9e\035\uff9e\036\uff9e" +
    "\040\uff9e\050\112\051\122\052\116\053\124\054\111\055" +
    "\113\056\uff9e\057\105\060\106\062\uff9e\064\uff9e\100\uff9e" +
    "\001\002\000\056\021\115\022\110\023\114\024\120\025" +
    "\107\026\121\034\uffa3\035\uffa3\036\uffa3\040\uffa3\050\uffa3" +
    "\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\062\uffa3\064\uffa3\100\uffa3\001\002\000\056" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\107\026\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\040\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\062" +
    "\uffa8\064\uffa8\100\uffa8\001\002\000\056\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\025\107\026\uffa6\034\uffa6\035\uffa6\036" +
    "\uffa6\040\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\055\uffa6\056\uffa6\057\uffa6\060\uffa6\062\uffa6\064\uffa6\100" +
    "\uffa6\001\002\000\060\002\uffb6\003\uffb6\010\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\032\uffb6\036" +
    "\uffb6\045\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\072\uffb6" +
    "\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\101\uffb6\001" +
    "\002\000\056\021\115\022\110\023\114\024\120\025\107" +
    "\026\121\034\uffa2\035\uffa2\036\uffa2\040\uffa2\050\uffa2\051" +
    "\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\062\uffa2\064\uffa2\100\uffa2\001\002\000\056\021" +
    "\uffaa\022\uffaa\023\114\024\120\025\107\026\121\034\uffaa" +
    "\035\uffaa\036\uffaa\040\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\062\uffaa" +
    "\064\uffaa\100\uffaa\001\002\000\056\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\025\107\026\uffa7\034\uffa7\035\uffa7\036\uffa7" +
    "\040\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\057\uffa7\060\uffa7\062\uffa7\064\uffa7\100\uffa7" +
    "\001\002\000\056\021\115\022\110\023\114\024\120\025" +
    "\107\026\121\034\uff9f\035\uff9f\036\uff9f\040\uff9f\050\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057" +
    "\uff9f\060\uff9f\062\uff9f\064\uff9f\100\uff9f\001\002\000\056" +
    "\021\115\022\110\023\114\024\120\025\107\026\121\034" +
    "\uffa4\035\uffa4\036\uffa4\040\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\062" +
    "\uffa4\064\uffa4\100\uffa4\001\002\000\056\021\115\022\110" +
    "\023\114\024\120\025\107\026\121\034\uffa0\035\uffa0\036" +
    "\uffa0\040\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\062\uffa0\064\uffa0\100" +
    "\uffa0\001\002\000\056\021\uffa9\022\uffa9\023\114\024\120" +
    "\025\107\026\121\034\uffa9\035\uffa9\036\uffa9\040\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9" +
    "\057\uffa9\060\uffa9\062\uffa9\064\uffa9\100\uffa9\001\002\000" +
    "\054\021\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\040\uffa5\050\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\062\uffa5" +
    "\064\uffa5\100\uffa5\001\002\000\056\021\115\022\110\023" +
    "\114\024\120\025\107\026\121\034\uff9c\035\uff9c\036\uff9c" +
    "\040\uff9c\050\112\051\122\052\116\053\124\054\111\055" +
    "\113\056\uff9c\057\uff9c\060\uff9c\062\uff9c\064\uff9c\100\uff9c" +
    "\001\002\000\056\021\115\022\110\023\114\024\120\025" +
    "\107\026\121\034\uff9d\035\uff9d\036\uff9d\040\uff9d\050\112" +
    "\051\122\052\116\053\124\054\111\055\113\056\uff9d\057" +
    "\uff9d\060\106\062\uff9d\064\uff9d\100\uff9d\001\002\000\056" +
    "\021\115\022\110\023\114\024\120\025\107\026\121\034" +
    "\uff9b\035\uff9b\036\uff9b\040\uff9b\050\112\051\122\052\116" +
    "\053\124\054\111\055\113\056\uff9b\057\uff9b\060\uff9b\062" +
    "\uff9b\064\uff9b\100\uff9b\001\002\000\032\004\070\005\074" +
    "\006\071\007\104\010\076\011\075\012\100\022\073\033" +
    "\077\061\102\102\101\103\072\001\002\000\042\021\115" +
    "\022\110\023\114\024\120\025\107\026\121\034\150\050" +
    "\112\051\122\052\116\053\124\054\111\055\113\056\123" +
    "\057\105\060\106\001\002\000\056\021\uff8c\022\uff8c\023" +
    "\uff8c\024\uff8c\025\uff8c\026\uff8c\034\uff8c\035\uff8c\036\uff8c" +
    "\040\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\056\uff8c\057\uff8c\060\uff8c\062\uff8c\064\uff8c\100\uff8c" +
    "\001\002\000\004\034\162\001\002\000\004\034\160\001" +
    "\002\000\004\034\156\001\002\000\042\021\115\022\110" +
    "\023\114\024\120\025\107\026\121\034\155\050\112\051" +
    "\122\052\116\053\124\054\111\055\113\056\123\057\105" +
    "\060\106\001\002\000\056\021\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\034\uff9a\035\uff9a\036\uff9a\040\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\057\uff9a\060\uff9a\062\uff9a\064\uff9a\100\uff9a\001\002" +
    "\000\032\004\070\005\074\006\071\007\104\010\076\011" +
    "\075\012\100\022\073\033\077\061\102\102\101\103\072" +
    "\001\002\000\056\021\115\022\110\023\114\024\120\025" +
    "\107\026\121\034\uff97\035\uff97\036\uff97\040\uff97\050\112" +
    "\051\122\052\116\053\124\054\111\055\113\056\123\057" +
    "\105\060\106\062\uff97\064\uff97\100\uff97\001\002\000\032" +
    "\004\070\005\074\006\071\007\104\010\076\011\075\012" +
    "\100\022\073\033\077\061\102\102\101\103\072\001\002" +
    "\000\056\021\115\022\110\023\114\024\120\025\107\026" +
    "\121\034\uff99\035\uff99\036\uff99\040\uff99\050\112\051\122" +
    "\052\116\053\124\054\111\055\113\056\123\057\105\060" +
    "\106\062\uff99\064\uff99\100\uff99\001\002\000\032\004\070" +
    "\005\074\006\071\007\104\010\076\011\075\012\100\022" +
    "\073\033\077\061\102\102\101\103\072\001\002\000\056" +
    "\021\115\022\110\023\114\024\120\025\107\026\121\034" +
    "\uff98\035\uff98\036\uff98\040\uff98\050\112\051\122\052\116" +
    "\053\124\054\111\055\113\056\123\057\105\060\106\062" +
    "\uff98\064\uff98\100\uff98\001\002\000\010\010\173\044\175" +
    "\104\174\001\002\000\032\004\070\005\074\006\071\007" +
    "\104\010\076\011\075\012\100\022\073\033\077\061\102" +
    "\102\101\103\072\001\002\000\042\021\115\022\110\023" +
    "\114\024\120\025\107\026\121\040\167\050\112\051\122" +
    "\052\116\053\124\054\111\055\113\056\123\057\105\060" +
    "\106\001\002\000\060\021\uff8f\022\uff8f\023\uff8f\024\uff8f" +
    "\025\uff8f\026\uff8f\034\uff8f\035\uff8f\036\uff8f\037\170\040" +
    "\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f" +
    "\056\uff8f\057\uff8f\060\uff8f\062\uff8f\064\uff8f\100\uff8f\001" +
    "\002\000\032\004\070\005\074\006\071\007\104\010\076" +
    "\011\075\012\100\022\073\033\077\061\102\102\101\103" +
    "\072\001\002\000\042\021\115\022\110\023\114\024\120" +
    "\025\107\026\121\040\172\050\112\051\122\052\116\053" +
    "\124\054\111\055\113\056\123\057\105\060\106\001\002" +
    "\000\056\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026" +
    "\uff8e\034\uff8e\035\uff8e\036\uff8e\040\uff8e\050\uff8e\051\uff8e" +
    "\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060" +
    "\uff8e\062\uff8e\064\uff8e\100\uff8e\001\002\000\060\021\uff89" +
    "\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\034\uff89\035" +
    "\uff89\036\uff89\040\uff89\042\204\050\uff89\051\uff89\052\uff89" +
    "\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\062" +
    "\uff89\064\uff89\100\uff89\001\002\000\004\033\201\001\002" +
    "\000\004\033\176\001\002\000\032\004\070\005\074\006" +
    "\071\007\104\010\076\011\075\012\100\022\073\033\077" +
    "\061\102\102\101\103\072\001\002\000\042\021\115\022" +
    "\110\023\114\024\120\025\107\026\121\034\200\050\112" +
    "\051\122\052\116\053\124\054\111\055\113\056\123\057" +
    "\105\060\106\001\002\000\056\021\uff8d\022\uff8d\023\uff8d" +
    "\024\uff8d\025\uff8d\026\uff8d\034\uff8d\035\uff8d\036\uff8d\040" +
    "\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d" +
    "\056\uff8d\057\uff8d\060\uff8d\062\uff8d\064\uff8d\100\uff8d\001" +
    "\002\000\032\004\070\005\074\006\071\007\104\010\076" +
    "\011\075\012\100\022\073\033\077\061\102\102\101\103" +
    "\072\001\002\000\042\021\115\022\110\023\114\024\120" +
    "\025\107\026\121\034\203\050\112\051\122\052\116\053" +
    "\124\054\111\055\113\056\123\057\105\060\106\001\002" +
    "\000\056\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\040\uff8a\050\uff8a\051\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060" +
    "\uff8a\062\uff8a\064\uff8a\100\uff8a\001\002\000\004\010\205" +
    "\001\002\000\056\021\uff88\022\uff88\023\uff88\024\uff88\025" +
    "\uff88\026\uff88\034\uff88\035\uff88\036\uff88\040\uff88\050\uff88" +
    "\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057" +
    "\uff88\060\uff88\062\uff88\064\uff88\100\uff88\001\002\000\056" +
    "\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\034" +
    "\uffab\035\uffab\036\uffab\040\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\062" +
    "\uffab\064\uffab\100\uffab\001\002\000\032\004\070\005\074" +
    "\006\071\007\104\010\076\011\075\012\100\022\073\033" +
    "\077\061\102\102\101\103\072\001\002\000\042\021\115" +
    "\022\110\023\114\024\120\025\107\026\121\034\211\050" +
    "\112\051\122\052\116\053\124\054\111\055\113\056\123" +
    "\057\105\060\106\001\002\000\056\021\uff8b\022\uff8b\023" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\034\uff8b\035\uff8b\036\uff8b" +
    "\040\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055" +
    "\uff8b\056\uff8b\057\uff8b\060\uff8b\062\uff8b\064\uff8b\100\uff8b" +
    "\001\002\000\010\010\214\066\010\067\060\001\002\000" +
    "\004\010\230\001\002\000\004\063\223\001\002\000\012" +
    "\010\uffda\036\uffda\066\uffda\067\uffda\001\002\000\012\010" +
    "\214\036\217\066\010\067\060\001\002\000\004\010\221" +
    "\001\002\000\012\010\uffdb\036\uffdb\066\uffdb\067\uffdb\001" +
    "\002\000\004\064\222\001\002\000\060\002\uffdf\003\uffdf" +
    "\010\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\032\uffdf\036\uffdf\045\uffdf\065\uffdf\066\uffdf\067\uffdf" +
    "\070\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077" +
    "\uffdf\101\uffdf\001\002\000\020\010\224\014\027\015\007" +
    "\016\041\017\043\020\005\077\037\001\002\000\004\064" +
    "\227\001\002\000\004\064\226\001\002\000\060\002\uffe4" +
    "\003\uffe4\010\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\032\uffe4\036\uffe4\045\uffe4\065\uffe4\066\uffe4" +
    "\067\uffe4\070\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076" +
    "\uffe4\077\uffe4\101\uffe4\001\002\000\060\002\uffe3\003\uffe3" +
    "\010\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\032\uffe3\036\uffe3\045\uffe3\065\uffe3\066\uffe3\067\uffe3" +
    "\070\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\077" +
    "\uffe3\101\uffe3\001\002\000\004\063\231\001\002\000\016" +
    "\014\027\015\007\016\041\017\043\020\005\077\037\001" +
    "\002\000\006\047\234\064\233\001\002\000\060\002\uffe5" +
    "\003\uffe5\010\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\032\uffe5\036\uffe5\045\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076" +
    "\uffe5\077\uffe5\101\uffe5\001\002\000\032\004\070\005\074" +
    "\006\071\007\104\010\076\011\075\012\100\022\073\033" +
    "\077\061\102\102\101\103\072\001\002\000\042\021\115" +
    "\022\110\023\114\024\120\025\107\026\121\050\112\051" +
    "\122\052\116\053\124\054\111\055\113\056\123\057\105" +
    "\060\106\064\236\001\002\000\060\002\uffe6\003\uffe6\010" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\032\uffe6\036\uffe6\045\uffe6\065\uffe6\066\uffe6\067\uffe6\070" +
    "\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6" +
    "\101\uffe6\001\002\000\004\002\001\001\002\000\016\014" +
    "\027\015\007\016\041\017\043\020\005\077\037\001\002" +
    "\000\004\054\242\001\002\000\004\010\243\001\002\000" +
    "\004\047\244\001\002\000\004\031\245\001\002\000\004" +
    "\032\246\001\002\000\004\033\247\001\002\000\004\034" +
    "\250\001\002\000\004\064\251\001\002\000\060\002\uffe0" +
    "\003\uffe0\010\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\032\uffe0\036\uffe0\045\uffe0\065\uffe0\066\uffe0" +
    "\067\uffe0\070\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076" +
    "\uffe0\077\uffe0\101\uffe0\001\002\000\032\004\070\005\074" +
    "\006\071\007\104\010\076\011\075\012\100\022\073\033" +
    "\077\061\102\102\101\103\072\001\002\000\042\021\115" +
    "\022\110\023\114\024\120\025\107\026\121\034\254\050" +
    "\112\051\122\052\116\053\124\054\111\055\113\056\123" +
    "\057\105\060\106\001\002\000\004\035\255\001\002\000" +
    "\054\003\033\010\016\013\012\014\027\015\007\016\041" +
    "\017\043\020\005\032\047\045\056\065\035\066\010\067" +
    "\060\070\030\072\021\073\017\074\046\075\061\076\014" +
    "\077\037\101\045\001\002\000\056\003\033\010\016\013" +
    "\012\014\027\015\007\016\041\017\043\020\005\032\047" +
    "\036\257\045\056\065\035\066\010\067\060\070\030\072" +
    "\021\073\017\074\046\075\061\076\014\077\037\101\045" +
    "\001\002\000\060\002\uffb7\003\uffb7\010\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\032\uffb7\036\uffb7" +
    "\045\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\072\uffb7\073" +
    "\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\101\uffb7\001\002" +
    "\000\004\033\261\001\002\000\034\004\070\005\074\006" +
    "\071\007\104\010\076\011\075\012\100\022\073\033\077" +
    "\034\262\061\102\102\101\103\072\001\002\000\004\064" +
    "\271\001\002\000\006\034\266\100\265\001\002\000\044" +
    "\021\115\022\110\023\114\024\120\025\107\026\121\034" +
    "\uffac\050\112\051\122\052\116\053\124\054\111\055\113" +
    "\056\123\057\105\060\106\100\uffac\001\002\000\032\004" +
    "\070\005\074\006\071\007\104\010\076\011\075\012\100" +
    "\022\073\033\077\061\102\102\101\103\072\001\002\000" +
    "\004\064\267\001\002\000\060\002\uffb1\003\uffb1\010\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\032" +
    "\uffb1\036\uffb1\045\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\101" +
    "\uffb1\001\002\000\044\021\115\022\110\023\114\024\120" +
    "\025\107\026\121\034\uffad\050\112\051\122\052\116\053" +
    "\124\054\111\055\113\056\123\057\105\060\106\100\uffad" +
    "\001\002\000\060\002\uffb0\003\uffb0\010\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\032\uffb0\036\uffb0" +
    "\045\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\072\uffb0\073" +
    "\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\101\uffb0\001\002" +
    "\000\060\002\uffb9\003\uffb9\010\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\032\uffb9\036\uffb9\045\uffb9" +
    "\065\uffb9\066\uffb9\067\uffb9\070\uffb9\072\uffb9\073\uffb9\074" +
    "\uffb9\075\uffb9\076\uffb9\077\uffb9\101\uffb9\001\002\000\060" +
    "\002\uffe9\003\uffe9\010\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\032\uffe9\036\uffe9\045\uffe9\065\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\072\uffe9\073\uffe9\074\uffe9\075" +
    "\uffe9\076\uffe9\077\uffe9\101\uffe9\001\002\000\032\004\070" +
    "\005\074\006\071\007\104\010\076\011\075\012\100\022" +
    "\073\033\077\061\102\102\101\103\072\001\002\000\042" +
    "\021\115\022\110\023\114\024\120\025\107\026\121\034" +
    "\276\050\112\051\122\052\116\053\124\054\111\055\113" +
    "\056\123\057\105\060\106\001\002\000\004\035\277\001" +
    "\002\000\054\003\033\010\016\013\012\014\027\015\007" +
    "\016\041\017\043\020\005\032\047\045\056\065\035\066" +
    "\010\067\060\070\030\072\021\073\017\074\046\075\061" +
    "\076\014\077\037\101\045\001\002\000\056\003\033\010" +
    "\016\013\012\014\027\015\007\016\041\017\043\020\005" +
    "\032\047\036\301\045\056\065\035\066\010\067\060\070" +
    "\030\072\021\073\017\074\046\075\061\076\014\077\037" +
    "\101\045\001\002\000\062\002\uffc5\003\uffc5\010\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\032\uffc5" +
    "\036\uffc5\045\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071" +
    "\302\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5" +
    "\101\uffc5\001\002\000\006\035\303\070\030\001\002\000" +
    "\054\003\033\010\016\013\012\014\027\015\007\016\041" +
    "\017\043\020\005\032\047\045\056\065\035\066\010\067" +
    "\060\070\030\072\021\073\017\074\046\075\061\076\014" +
    "\077\037\101\045\001\002\000\060\002\uffc3\003\uffc3\010" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\032\uffc3\036\uffc3\045\uffc3\065\uffc3\066\uffc3\067\uffc3\070" +
    "\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3" +
    "\101\uffc3\001\002\000\056\003\033\010\016\013\012\014" +
    "\027\015\007\016\041\017\043\020\005\032\047\036\306" +
    "\045\056\065\035\066\010\067\060\070\030\072\021\073" +
    "\017\074\046\075\061\076\014\077\037\101\045\001\002" +
    "\000\060\002\uffc4\003\uffc4\010\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\032\uffc4\036\uffc4\045\uffc4" +
    "\065\uffc4\066\uffc4\067\uffc4\070\uffc4\072\uffc4\073\uffc4\074" +
    "\uffc4\075\uffc4\076\uffc4\077\uffc4\101\uffc4\001\002\000\004" +
    "\063\310\001\002\000\020\010\311\014\027\015\007\016" +
    "\041\017\043\020\005\077\037\001\002\000\004\047\343" +
    "\001\002\000\010\037\313\047\234\064\233\001\002\000" +
    "\004\040\314\001\002\000\006\037\315\047\316\001\002" +
    "\000\004\040\326\001\002\000\004\037\317\001\002\000" +
    "\032\004\070\005\074\006\071\007\104\010\076\011\075" +
    "\012\100\022\073\033\077\061\102\102\101\103\072\001" +
    "\002\000\006\040\323\100\322\001\002\000\044\021\115" +
    "\022\110\023\114\024\120\025\107\026\121\040\uffd8\050" +
    "\112\051\122\052\116\053\124\054\111\055\113\056\123" +
    "\057\105\060\106\100\uffd8\001\002\000\032\004\070\005" +
    "\074\006\071\007\104\010\076\011\075\012\100\022\073" +
    "\033\077\061\102\102\101\103\072\001\002\000\004\064" +
    "\324\001\002\000\060\002\uffe2\003\uffe2\010\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\032\uffe2\036" +
    "\uffe2\045\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\072\uffe2" +
    "\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\101\uffe2\001" +
    "\002\000\044\021\115\022\110\023\114\024\120\025\107" +
    "\026\121\040\uffd9\050\112\051\122\052\116\053\124\054" +
    "\111\055\113\056\123\057\105\060\106\100\uffd9\001\002" +
    "\000\004\047\327\001\002\000\004\037\330\001\002\000" +
    "\004\037\332\001\002\000\006\040\336\100\335\001\002" +
    "\000\032\004\070\005\074\006\071\007\104\010\076\011" +
    "\075\012\100\022\073\033\077\061\102\102\101\103\072" +
    "\001\002\000\006\040\334\100\322\001\002\000\006\040" +
    "\uffd6\100\uffd6\001\002\000\004\037\340\001\002\000\004" +
    "\064\337\001\002\000\060\002\uffe1\003\uffe1\010\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\032\uffe1" +
    "\036\uffe1\045\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\072" +
    "\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\101\uffe1" +
    "\001\002\000\032\004\070\005\074\006\071\007\104\010" +
    "\076\011\075\012\100\022\073\033\077\061\102\102\101" +
    "\103\072\001\002\000\006\040\342\100\322\001\002\000" +
    "\006\040\uffd7\100\uffd7\001\002\000\004\035\344\001\002" +
    "\000\004\010\345\001\002\000\004\063\355\001\002\000" +
    "\006\036\350\100\347\001\002\000\004\010\352\001\002" +
    "\000\004\064\351\001\002\000\060\002\uffde\003\uffde\010" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\032\uffde\036\uffde\045\uffde\065\uffde\066\uffde\067\uffde\070" +
    "\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde" +
    "\101\uffde\001\002\000\004\063\353\001\002\000\032\004" +
    "\070\005\074\006\071\007\104\010\076\011\075\012\100" +
    "\022\073\033\077\061\102\102\101\103\072\001\002\000" +
    "\044\021\115\022\110\023\114\024\120\025\107\026\121" +
    "\036\uffdd\050\112\051\122\052\116\053\124\054\111\055" +
    "\113\056\123\057\105\060\106\100\uffdd\001\002\000\032" +
    "\004\070\005\074\006\071\007\104\010\076\011\075\012" +
    "\100\022\073\033\077\061\102\102\101\103\072\001\002" +
    "\000\044\021\115\022\110\023\114\024\120\025\107\026" +
    "\121\036\uffdc\050\112\051\122\052\116\053\124\054\111" +
    "\055\113\056\123\057\105\060\106\100\uffdc\001\002\000" +
    "\042\021\115\022\110\023\114\024\120\025\107\026\121" +
    "\035\360\050\112\051\122\052\116\053\124\054\111\055" +
    "\113\056\123\057\105\060\106\001\002\000\034\004\070" +
    "\005\074\006\071\007\104\010\076\011\075\012\100\022" +
    "\073\033\077\041\361\061\102\102\101\103\072\001\002" +
    "\000\004\062\373\001\002\000\036\004\070\005\074\006" +
    "\071\007\104\010\076\011\075\012\100\022\073\033\077" +
    "\036\371\041\361\061\102\102\101\103\072\001\002\000" +
    "\036\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\022\uffc0\033\uffc0\036\uffc0\041\uffc0\061\uffc0\102" +
    "\uffc0\103\uffc0\001\002\000\042\021\115\022\110\023\114" +
    "\024\120\025\107\026\121\050\112\051\122\052\116\053" +
    "\124\054\111\055\113\056\123\057\105\060\106\062\365" +
    "\001\002\000\004\035\366\001\002\000\054\003\033\010" +
    "\016\013\012\014\027\015\007\016\041\017\043\020\005" +
    "\032\047\045\056\065\035\066\010\067\060\070\030\072" +
    "\021\073\017\074\046\075\061\076\014\077\037\101\045" +
    "\001\002\000\056\003\033\010\016\013\012\014\027\015" +
    "\007\016\041\017\043\020\005\032\047\036\370\045\056" +
    "\065\035\066\010\067\060\070\030\072\021\073\017\074" +
    "\046\075\061\076\014\077\037\101\045\001\002\000\036" +
    "\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012" +
    "\uffbf\022\uffbf\033\uffbf\036\uffbf\041\uffbf\061\uffbf\102\uffbf" +
    "\103\uffbf\001\002\000\060\002\uffc2\003\uffc2\010\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\032\uffc2" +
    "\036\uffc2\045\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\072" +
    "\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\101\uffc2" +
    "\001\002\000\036\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\022\uffc1\033\uffc1\036\uffc1\041\uffc1" +
    "\061\uffc1\102\uffc1\103\uffc1\001\002\000\004\035\374\001" +
    "\002\000\054\003\033\010\016\013\012\014\027\015\007" +
    "\016\041\017\043\020\005\032\047\045\056\065\035\066" +
    "\010\067\060\070\030\072\021\073\017\074\046\075\061" +
    "\076\014\077\037\101\045\001\002\000\056\003\033\010" +
    "\016\013\012\014\027\015\007\016\041\017\043\020\005" +
    "\032\047\036\376\045\056\065\035\066\010\067\060\070" +
    "\030\072\021\073\017\074\046\075\061\076\014\077\037" +
    "\101\045\001\002\000\036\004\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\022\uffbe\033\uffbe\036\uffbe" +
    "\041\uffbe\061\uffbe\102\uffbe\103\uffbe\001\002\000\004\010" +
    "\u0100\001\002\000\010\027\u0110\030\u010e\047\u010f\001\002" +
    "\000\032\004\070\005\074\006\071\007\104\010\076\011" +
    "\075\012\100\022\073\033\077\061\102\102\101\103\072" +
    "\001\002\000\042\021\115\022\110\023\114\024\120\025" +
    "\107\026\121\050\112\051\122\052\116\053\124\054\111" +
    "\055\113\056\123\057\105\060\106\064\u0103\001\002\000" +
    "\004\010\u0104\001\002\000\010\027\u010c\030\u010a\047\u010b" +
    "\001\002\000\004\034\u0106\001\002\000\004\035\u0107\001" +
    "\002\000\054\003\033\010\016\013\012\014\027\015\007" +
    "\016\041\017\043\020\005\032\047\045\056\065\035\066" +
    "\010\067\060\070\030\072\021\073\017\074\046\075\061" +
    "\076\014\077\037\101\045\001\002\000\056\003\033\010" +
    "\016\013\012\014\027\015\007\016\041\017\043\020\005" +
    "\032\047\036\u0109\045\056\065\035\066\010\067\060\070" +
    "\030\072\021\073\017\074\046\075\061\076\014\077\037" +
    "\101\045\001\002\000\060\002\uffbd\003\uffbd\010\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\032\uffbd" +
    "\036\uffbd\045\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\072" +
    "\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\101\uffbd" +
    "\001\002\000\004\034\uffba\001\002\000\032\004\070\005" +
    "\074\006\071\007\104\010\076\011\075\012\100\022\073" +
    "\033\077\061\102\102\101\103\072\001\002\000\004\034" +
    "\uffbb\001\002\000\042\021\115\022\110\023\114\024\120" +
    "\025\107\026\121\034\uffbc\050\112\051\122\052\116\053" +
    "\124\054\111\055\113\056\123\057\105\060\106\001\002" +
    "\000\004\064\u0114\001\002\000\032\004\070\005\074\006" +
    "\071\007\104\010\076\011\075\012\100\022\073\033\077" +
    "\061\102\102\101\103\072\001\002\000\004\064\u0111\001" +
    "\002\000\106\002\uffd2\003\uffd2\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\022\uffd2\032\uffd2\033\uffd2" +
    "\036\uffd2\045\uffd2\061\uffd2\065\uffd2\066\uffd2\067\uffd2\070" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2" +
    "\101\uffd2\102\uffd2\103\uffd2\001\002\000\042\021\115\022" +
    "\110\023\114\024\120\025\107\026\121\050\112\051\122" +
    "\052\116\053\124\054\111\055\113\056\123\057\105\060" +
    "\106\064\u0113\001\002\000\106\002\uffd3\003\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\022\uffd3" +
    "\032\uffd3\033\uffd3\036\uffd3\045\uffd3\061\uffd3\065\uffd3\066" +
    "\uffd3\067\uffd3\070\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3" +
    "\076\uffd3\077\uffd3\101\uffd3\102\uffd3\103\uffd3\001\002\000" +
    "\106\002\uffd1\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\022\uffd1\032\uffd1\033\uffd1\036\uffd1" +
    "\045\uffd1\061\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\072" +
    "\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\101\uffd1" +
    "\102\uffd1\103\uffd1\001\002\000\006\010\u0128\043\u0129\001" +
    "\002\000\032\004\070\005\074\006\071\007\104\010\076" +
    "\011\075\012\100\022\073\033\077\061\102\102\101\103" +
    "\072\001\002\000\034\004\070\005\074\006\071\007\104" +
    "\010\076\011\075\012\100\022\073\033\077\034\u0118\061" +
    "\102\102\101\103\072\001\002\000\004\064\u011c\001\002" +
    "\000\006\034\u011a\100\265\001\002\000\004\064\u011b\001" +
    "\002\000\060\002\uffaf\003\uffaf\010\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\032\uffaf\036\uffaf\045" +
    "\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\072\uffaf\073\uffaf" +
    "\074\uffaf\075\uffaf\076\uffaf\077\uffaf\101\uffaf\001\002\000" +
    "\060\002\uffae\003\uffae\010\uffae\013\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\032\uffae\036\uffae\045\uffae\065" +
    "\uffae\066\uffae\067\uffae\070\uffae\072\uffae\073\uffae\074\uffae" +
    "\075\uffae\076\uffae\077\uffae\101\uffae\001\002\000\042\021" +
    "\115\022\110\023\114\024\120\025\107\026\121\040\u011e" +
    "\050\112\051\122\052\116\053\124\054\111\055\113\056" +
    "\123\057\105\060\106\001\002\000\006\037\u0120\047\u011f" +
    "\001\002\000\032\004\070\005\074\006\071\007\104\010" +
    "\076\011\075\012\100\022\073\033\077\061\102\102\101" +
    "\103\072\001\002\000\032\004\070\005\074\006\071\007" +
    "\104\010\076\011\075\012\100\022\073\033\077\061\102" +
    "\102\101\103\072\001\002\000\042\021\115\022\110\023" +
    "\114\024\120\025\107\026\121\040\u0122\050\112\051\122" +
    "\052\116\053\124\054\111\055\113\056\123\057\105\060" +
    "\106\001\002\000\004\047\u0123\001\002\000\032\004\070" +
    "\005\074\006\071\007\104\010\076\011\075\012\100\022" +
    "\073\033\077\061\102\102\101\103\072\001\002\000\042" +
    "\021\115\022\110\023\114\024\120\025\107\026\121\050" +
    "\112\051\122\052\116\053\124\054\111\055\113\056\123" +
    "\057\105\060\106\064\u0125\001\002\000\060\002\uffcf\003" +
    "\uffcf\010\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\032\uffcf\036\uffcf\045\uffcf\065\uffcf\066\uffcf\067" +
    "\uffcf\070\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf" +
    "\077\uffcf\101\uffcf\001\002\000\042\021\115\022\110\023" +
    "\114\024\120\025\107\026\121\050\112\051\122\052\116" +
    "\053\124\054\111\055\113\056\123\057\105\060\106\064" +
    "\u0127\001\002\000\060\002\uffd0\003\uffd0\010\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\032\uffd0\036" +
    "\uffd0\045\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\072\uffd0" +
    "\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\101\uffd0\001" +
    "\002\000\006\042\u012e\047\u012f\001\002\000\004\033\u012a" +
    "\001\002\000\032\004\070\005\074\006\071\007\104\010" +
    "\076\011\075\012\100\022\073\033\077\061\102\102\101" +
    "\103\072\001\002\000\042\021\115\022\110\023\114\024" +
    "\120\025\107\026\121\034\u012c\050\112\051\122\052\116" +
    "\053\124\054\111\055\113\056\123\057\105\060\106\001" +
    "\002\000\004\064\u012d\001\002\000\060\002\uffce\003\uffce" +
    "\010\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\032\uffce\036\uffce\045\uffce\065\uffce\066\uffce\067\uffce" +
    "\070\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077" +
    "\uffce\101\uffce\001\002\000\004\010\u0132\001\002\000\032" +
    "\004\070\005\074\006\071\007\104\010\076\011\075\012" +
    "\100\022\073\033\077\061\102\102\101\103\072\001\002" +
    "\000\042\021\115\022\110\023\114\024\120\025\107\026" +
    "\121\050\112\051\122\052\116\053\124\054\111\055\113" +
    "\056\123\057\105\060\106\064\u0131\001\002\000\060\002" +
    "\uffcd\003\uffcd\010\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\032\uffcd\036\uffcd\045\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd" +
    "\076\uffcd\077\uffcd\101\uffcd\001\002\000\004\047\u0133\001" +
    "\002\000\032\004\070\005\074\006\071\007\104\010\076" +
    "\011\075\012\100\022\073\033\077\061\102\102\101\103" +
    "\072\001\002\000\042\021\115\022\110\023\114\024\120" +
    "\025\107\026\121\050\112\051\122\052\116\053\124\054" +
    "\111\055\113\056\123\057\105\060\106\064\u0135\001\002" +
    "\000\060\002\uffcc\003\uffcc\010\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\032\uffcc\036\uffcc\045\uffcc" +
    "\065\uffcc\066\uffcc\067\uffcc\070\uffcc\072\uffcc\073\uffcc\074" +
    "\uffcc\075\uffcc\076\uffcc\077\uffcc\101\uffcc\001\002\000\060" +
    "\002\uffb8\003\uffb8\010\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\032\uffb8\036\uffb8\045\uffb8\065\uffb8" +
    "\066\uffb8\067\uffb8\070\uffb8\072\uffb8\073\uffb8\074\uffb8\075" +
    "\uffb8\076\uffb8\077\uffb8\101\uffb8\001\002\000\032\004\070" +
    "\005\074\006\071\007\104\010\076\011\075\012\100\022" +
    "\073\033\077\061\102\102\101\103\072\001\002\000\042" +
    "\021\115\022\110\023\114\024\120\025\107\026\121\034" +
    "\u0139\050\112\051\122\052\116\053\124\054\111\055\113" +
    "\056\123\057\105\060\106\001\002\000\004\064\u013a\001" +
    "\002\000\060\002\uffe7\003\uffe7\010\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\032\uffe7\036\uffe7\045" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\072\uffe7\073\uffe7" +
    "\074\uffe7\075\uffe7\076\uffe7\077\uffe7\101\uffe7\001\002\000" +
    "\004\033\u013c\001\002\000\020\014\027\015\007\016\041" +
    "\017\043\020\005\034\u013e\077\037\001\002\000\006\034" +
    "\u0145\100\u0144\001\002\000\004\035\u0141\001\002\000\004" +
    "\010\u0140\001\002\000\006\034\uffb2\100\uffb2\001\002\000" +
    "\054\003\033\010\016\013\012\014\027\015\007\016\041" +
    "\017\043\020\005\032\047\045\056\065\035\066\010\067" +
    "\060\070\030\072\021\073\017\074\046\075\061\076\014" +
    "\077\037\101\045\001\002\000\056\003\033\010\016\013" +
    "\012\014\027\015\007\016\041\017\043\020\005\032\047" +
    "\036\u0143\045\056\065\035\066\010\067\060\070\030\072" +
    "\021\073\017\074\046\075\061\076\014\077\037\101\045" +
    "\001\002\000\060\002\uffb4\003\uffb4\010\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\032\uffb4\036\uffb4" +
    "\045\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\072\uffb4\073" +
    "\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\101\uffb4\001\002" +
    "\000\016\014\027\015\007\016\041\017\043\020\005\077" +
    "\037\001\002\000\004\035\u0146\001\002\000\054\003\033" +
    "\010\016\013\012\014\027\015\007\016\041\017\043\020" +
    "\005\032\047\045\056\065\035\066\010\067\060\070\030" +
    "\072\021\073\017\074\046\075\061\076\014\077\037\101" +
    "\045\001\002\000\056\003\033\010\016\013\012\014\027" +
    "\015\007\016\041\017\043\020\005\032\047\036\u0148\045" +
    "\056\065\035\066\010\067\060\070\030\072\021\073\017" +
    "\074\046\075\061\076\014\077\037\101\045\001\002\000" +
    "\060\002\uffb5\003\uffb5\010\uffb5\013\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\032\uffb5\036\uffb5\045\uffb5\065" +
    "\uffb5\066\uffb5\067\uffb5\070\uffb5\072\uffb5\073\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\077\uffb5\101\uffb5\001\002\000\004\010" +
    "\u014a\001\002\000\006\034\uffb3\100\uffb3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\064\002\053\003\017\006\014\007\047\010" +
    "\041\011\037\012\050\013\010\014\043\016\023\017\052" +
    "\020\054\021\056\022\005\023\025\025\012\027\031\032" +
    "\003\033\021\034\022\037\033\040\024\041\051\042\035" +
    "\044\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\006\063\007\047\010\041\011\037\012\050\013" +
    "\010\014\043\016\023\017\052\020\054\021\056\022\005" +
    "\023\025\025\012\027\031\032\003\033\021\034\022\037" +
    "\033\040\024\041\051\042\035\044\030\001\001\000\004" +
    "\024\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\062\006\014\007\047\010\041\011" +
    "\037\012\050\013\010\014\043\016\023\017\052\020\054" +
    "\021\056\022\005\023\025\025\012\027\031\032\003\033" +
    "\021\034\022\037\033\040\024\041\051\042\035\044\030" +
    "\001\001\000\060\006\063\007\047\010\041\011\037\012" +
    "\050\013\010\014\043\016\023\017\052\020\054\021\056" +
    "\022\005\023\025\025\012\027\031\032\003\033\021\034" +
    "\022\037\033\040\024\041\051\042\035\044\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\143\001\001\000\004\024\142\001\001\000\004\024" +
    "\141\001\001\000\004\024\140\001\001\000\004\024\137" +
    "\001\001\000\004\024\136\001\001\000\004\024\135\001" +
    "\001\000\004\024\134\001\001\000\004\024\133\001\001" +
    "\000\004\024\132\001\001\000\002\001\001\000\004\024" +
    "\130\001\001\000\004\024\127\001\001\000\004\024\126" +
    "\001\001\000\004\024\125\001\001\000\004\024\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\156\001\001\000\002\001\001\000\004\024\160" +
    "\001\001\000\002\001\001\000\004\024\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\214\023\212\031\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\217\023\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\255\006\014\007\047\010\041\011\037" +
    "\012\050\013\010\014\043\016\023\017\052\020\054\021" +
    "\056\022\005\023\025\025\012\027\031\032\003\033\021" +
    "\034\022\037\033\040\024\041\051\042\035\044\030\001" +
    "\001\000\060\006\063\007\047\010\041\011\037\012\050" +
    "\013\010\014\043\016\023\017\052\020\054\021\056\022" +
    "\005\023\025\025\012\027\031\032\003\033\021\034\022" +
    "\037\033\040\024\041\051\042\035\044\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\263\030\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\277\006\014\007" +
    "\047\010\041\011\037\012\050\013\010\014\043\016\023" +
    "\017\052\020\054\021\056\022\005\023\025\025\012\027" +
    "\031\032\003\033\021\034\022\037\033\040\024\041\051" +
    "\042\035\044\030\001\001\000\060\006\063\007\047\010" +
    "\041\011\037\012\050\013\010\014\043\016\023\017\052" +
    "\020\054\021\056\022\005\023\025\025\012\027\031\032" +
    "\003\033\021\034\022\037\033\040\024\041\051\042\035" +
    "\044\030\001\001\000\002\001\001\000\004\012\303\001" +
    "\001\000\062\003\304\006\014\007\047\010\041\011\037" +
    "\012\050\013\010\014\043\016\023\017\052\020\054\021" +
    "\056\022\005\023\025\025\012\027\031\032\003\033\021" +
    "\034\022\037\033\040\024\041\051\042\035\044\030\001" +
    "\001\000\002\001\001\000\060\006\063\007\047\010\041" +
    "\011\037\012\050\013\010\014\043\016\023\017\052\020" +
    "\054\021\056\022\005\023\025\025\012\027\031\032\003" +
    "\033\021\034\022\037\033\040\024\041\051\042\035\044" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\320\035\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\330\001\001\000\002" +
    "\001\001\000\006\024\320\035\332\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\320\035\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\353\001\001\000\002\001\001\000" +
    "\004\024\355\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\361\005\362\024\363\001\001\000\002\001" +
    "\001\000\006\005\371\024\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\366\006" +
    "\014\007\047\010\041\011\037\012\050\013\010\014\043" +
    "\016\023\017\052\020\054\021\056\022\005\023\025\025" +
    "\012\027\031\032\003\033\021\034\022\037\033\040\024" +
    "\041\051\042\035\044\030\001\001\000\060\006\063\007" +
    "\047\010\041\011\037\012\050\013\010\014\043\016\023" +
    "\017\052\020\054\021\056\022\005\023\025\025\012\027" +
    "\031\032\003\033\021\034\022\037\033\040\024\041\051" +
    "\042\035\044\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\374" +
    "\006\014\007\047\010\041\011\037\012\050\013\010\014" +
    "\043\016\023\017\052\020\054\021\056\022\005\023\025" +
    "\025\012\027\031\032\003\033\021\034\022\037\033\040" +
    "\024\041\051\042\035\044\030\001\001\000\060\006\063" +
    "\007\047\010\041\011\037\012\050\013\010\014\043\016" +
    "\023\017\052\020\054\021\056\022\005\023\025\025\012" +
    "\027\031\032\003\033\021\034\022\037\033\040\024\041" +
    "\051\042\035\044\030\001\001\000\002\001\001\000\004" +
    "\011\u0100\001\001\000\002\001\001\000\004\024\u0101\001" +
    "\001\000\002\001\001\000\004\015\u0104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u0107\006\014\007\047\010\041\011\037\012\050\013\010" +
    "\014\043\016\023\017\052\020\054\021\056\022\005\023" +
    "\025\025\012\027\031\032\003\033\021\034\022\037\033" +
    "\040\024\041\051\042\035\044\030\001\001\000\060\006" +
    "\063\007\047\010\041\011\037\012\050\013\010\014\043" +
    "\016\023\017\052\020\054\021\056\022\005\023\025\025" +
    "\012\027\031\032\003\033\021\034\022\037\033\040\024" +
    "\041\051\042\035\044\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\u010c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u0111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u011c\001\001\000\006\024\263\030\u0118\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0125\001\001\000\004\024\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u0123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u012a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u012f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u0133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\u0137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\u013e\026\u013c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\u0141\006\014\007\047\010\041\011\037\012" +
    "\050\013\010\014\043\016\023\017\052\020\054\021\056" +
    "\022\005\023\025\025\012\027\031\032\003\033\021\034" +
    "\022\037\033\040\024\041\051\042\035\044\030\001\001" +
    "\000\060\006\063\007\047\010\041\011\037\012\050\013" +
    "\010\014\043\016\023\017\052\020\054\021\056\022\005" +
    "\023\025\025\012\027\031\032\003\033\021\034\022\037" +
    "\033\040\024\041\051\042\035\044\030\001\001\000\002" +
    "\001\001\000\004\022\u0148\001\001\000\002\001\001\000" +
    "\062\003\u0146\006\014\007\047\010\041\011\037\012\050" +
    "\013\010\014\043\016\023\017\052\020\054\021\056\022" +
    "\005\023\025\025\012\027\031\032\003\033\021\034\022" +
    "\037\033\040\024\041\051\042\035\044\030\001\001\000" +
    "\060\006\063\007\047\010\041\011\037\012\050\013\010" +
    "\014\043\016\023\017\052\020\054\021\056\022\005\023" +
    "\025\025\012\027\031\032\003\033\021\034\022\037\033" +
    "\040\024\041\051\042\035\044\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CDO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SALIDA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CONTINIU 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= Start_WITH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= DECLARACION_VECTORES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= ASIGNACION_VECT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= DECLARACION_LISTASDIN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= ASIGNACION_LISTADIN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= DECLARACION_STRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= INSTANCIA_STRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= ASIGNACION_STRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(d, b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(d, b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= ID_VARIABLE DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= ID_VARIABLE DOSPUNTOS ID_VARIABLE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_VECTORES ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS COR1 COR2 IGUAL COR1 LISTAVALORES1 COR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                                                                                                                    RESULT = new Declaracion_Vectores(b, d, null, a, c, aleft, aright);
                                                                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION_VECTORES ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS COR1 COR2 COR1 COR2 IGUAL COR1 LISTAVALORES2 COR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> d = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                LinkedList<LinkedList<Instruccion>> valores_2D = d;
                RESULT = new Declaracion_Vectores(b, null, valores_2D, a, c, aleft, aright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION_LISTASDIN ::= LIST MENOR_QUE TIPOS MAYOR_QUE ID_VARIABLE IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 RESULT = new Declaracion_LDinamicas(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTASDIN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_STRUCT ::= STRUCT LLAV1 LISTA_DECLARACIONES LLAV2 ID_VARIABLE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion_Struct(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTANCIA_STRUCT ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS ID_VARIABLE IGUAL LLAV1 VALORES_STRUCT LLAV2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Object> d = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ArrayList<Object> lista_Separar = d;
        LinkedList<String> variables_Struct = new LinkedList<>();
        LinkedList<Instruccion> valores_Struct = new LinkedList<>();
        for( int i = 0; i < lista_Separar.size(); i++ ){
            if( i % 2 == 0 ){
                variables_Struct.add( lista_Separar.get(i).toString() );
            }else{
                valores_Struct.add( (Instruccion) lista_Separar.get(i) );
            }
        }
        RESULT = new Instancia_Struct(b, c, variables_Struct, valores_Struct, a, aleft, aright);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA_STRUCT",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALORES_STRUCT ::= VALORES_STRUCT COMA ID_VARIABLE DOSPUNTOS EXPRESION 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); RESULT.add(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_STRUCT",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALORES_STRUCT ::= ID_VARIABLE DOSPUNTOS EXPRESION 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_STRUCT",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA_DECLARACIONES ::= LISTA_DECLARACIONES DECLARACION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTA_DECLARACIONES ::= DECLARACION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTAVALORES1 ::= LISTAVALORES1 COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTAVALORES1 ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTAVALORES2 ::= LISTAVALORES2 COMA COR1 LISTAVALORES1 COR2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTAVALORES2 ::= COR1 LISTAVALORES1 COR2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MUTABILIDAD ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MUTABILIDAD ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION ::= ID_VARIABLE IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACION ::= ID_VARIABLE INCREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.INCREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= ID_VARIABLE DECREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.DECREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION_VECT ::= ID_VARIABLE COR1 EXPRESION COR2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVec(a, b, null, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECT",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION_VECT ::= ID_VARIABLE COR1 EXPRESION COR2 COR1 EXPRESION COR2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVec(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECT",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION_LISTADIN ::= ID_VARIABLE PUNTO APPEND PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AsignacionLista(a, b, null, OperadoresLista.ADD, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_LISTADIN",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION_STRUCT ::= ID_VARIABLE PUNTO ID_VARIABLE IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ArrayList<String> lista_ids = new ArrayList<>();
        lista_ids.add(a);
        lista_ids.add(b);

        RESULT = new Asignacion_Struct(lista_ids, c, aleft, aright);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_STRUCT",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION_STRUCT ::= ID_VARIABLE PUNTO ID_VARIABLE PUNTO ID_VARIABLE IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ArrayList<String> lista_ids = new ArrayList<>();
        lista_ids.add(a);
        lista_ids.add(b);
        lista_ids.add(c);

        RESULT = new Asignacion_Struct(lista_ids, d, aleft, aright);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_STRUCT",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOS ::= TYPE_INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOS ::= TYPE_DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOS ::= TYPE_STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPOS ::= TYPE_CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPOS ::= TYPE_BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SIF ::= IF PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SIF ::= IF PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 ELSE LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c,  aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SIF ::= IF PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF_ELSE_IF(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SMATCH ::= MATCH EXPRESION LLAV1 CASES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Cases_Match> b = (LinkedList<Cases_Match>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASES ::= CASES CASE 
            {
              LinkedList<Cases_Match> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Cases_Match> a = (LinkedList<Cases_Match>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cases_Match b = (Cases_Match)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASES ::= CASE 
            {
              LinkedList<Cases_Match> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cases_Match a = (Cases_Match)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CASE ::= EXPRESION FLECHA LLAV1 INSTRUCCIONES LLAV2 
            {
              Cases_Match RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Cases_Match(a, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CASE ::= DEFAULT_MATCH FLECHA LLAV1 INSTRUCCIONES LLAV2 
            {
              Cases_Match RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Cases_Match(null, a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACTUALIZA_FOR ::= ID_VARIABLE IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACTUALIZA_FOR ::= ID_VARIABLE INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.INCREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ACTUALIZA_FOR ::= ID_VARIABLE DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.DECREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SALIDA ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SALIDA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTINIU ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINIU",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CDO_WHILE ::= DO LLAV1 INSTRUCCIONES LLAV2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Do_While(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDO_WHILE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // METODO ::= TIPOS ID_VARIABLE PAR1 PARAMS PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, p, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // METODO ::= TIPOS ID_VARIABLE PAR1 PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARAMS ::= PARAMS COMA TIPOS ID_VARIABLE 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                                RESULT = a;
                                                                var hm2 = new HashMap<String, Object>();
                                                                hm2.put("id", c);
                                                                hm2.put("tipo", b);
                                                                RESULT.add(hm2);
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARAMS ::= TIPOS ID_VARIABLE 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>();
                                                                var hm = new HashMap<String, Object>();
                                                                hm.put("id",b);
                                                                hm.put("tipo",a); 
                                                                RESULT.add(hm);
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Start_WITH ::= START_WITH ID_VARIABLE PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Execute(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Start_WITH",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Start_WITH ::= START_WITH ID_VARIABLE PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Execute(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Start_WITH",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LLAMADA ::= ID_VARIABLE PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Llamada(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LLAMADA ::= ID_VARIABLE PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Llamada(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        RESULT = a; 
                                                        RESULT.add(b);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        RESULT = new LinkedList<Instruccion>(); 
                                                        RESULT.add(a);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPRESION IGUAL_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPRESION DIFERENTE_DE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= EXPRESION MENOR_QUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= EXPRESION MAYOR_QUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= PAR1 TYPE_INT PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, OperadoresCasteo.INT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= PAR1 TYPE_DOUBLE PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, OperadoresCasteo.DOUBLE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= PAR1 TYPE_CHAR PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, OperadoresCasteo.CHAR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Double.valueOf(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= CHAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a.charAt(1), new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= ID_VARIABLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= ID_VARIABLE COR1 EXPRESION COR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVec(a, b, null, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= ID_VARIABLE COR1 EXPRESION COR2 COR1 EXPRESION COR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVec(a, b, c, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= ID_VARIABLE PUNTO REMOVE PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionLista(a, null, b, OperadoresLista.REMOVE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= ROUND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Round(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= LENGTH PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Length(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= ID_VARIABLE PUNTO FIND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Find(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= ID_VARIABLE PUNTO ID_VARIABLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<String> lista_ids = new ArrayList<>();
                lista_ids.add(a);
                lista_ids.add(b);

                RESULT = new AccesoStruct(lista_ids, aleft, aright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= ID_VARIABLE PUNTO ID_VARIABLE PUNTO ID_VARIABLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<String> lista_ids = new ArrayList<>();
                lista_ids.add(a);
                lista_ids.add(b);
                lista_ids.add(c);

                RESULT = new AccesoStruct(lista_ids, aleft, aright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
