
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.sentencias_Control.If;
import instrucciones.sentencias_Control.IF_ELSE_IF;
import instrucciones.sentencias_Control.Match;
import instrucciones.sentencias_Control.Cases_Match;
import instrucciones.sentencias_Ciclicas.For;
import instrucciones.sentencias_Ciclicas.While;
import instrucciones.sentencias_Ciclicas.Do_While;
import instrucciones.sentencias_Transferencia.Break;
import instrucciones.sentencias_Transferencia.Continue;
import instrucciones.subrutina.Metodo;
import instrucciones.subrutina.Execute;
import instrucciones.vectores.Declaracion_Vectores;
import expresiones.Nativo;
import expresiones.aritmeticas.Aritmeticas;
import expresiones.aritmeticas.OperadoresAritmeticos;
import expresiones.relacionales.OperadoresRelacionales;
import expresiones.relacionales.Relacionales;
import expresiones.logicas.OperadoresLogicos;
import expresiones.logicas.Logicas;
import expresiones.casteo.Casteos;
import expresiones.casteo.OperadoresCasteo;
import expresiones.variable.AccesoVar;
import expresiones.variable.OperadoresVariable;
import expresiones.vectores.AccesoVec;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\004\000\002\006\003" +
    "\000\002\007\007\000\002\010\011\000\002\010\007\000" +
    "\002\031\015\000\002\031\017\000\002\032\005\000\002" +
    "\032\003\000\002\033\007\000\002\033\005\000\002\023" +
    "\003\000\002\023\003\000\002\011\006\000\002\011\005" +
    "\000\002\011\005\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\012\011\000\002\012\015\000\002\012" +
    "\013\000\002\013\007\000\002\004\004\000\002\004\003" +
    "\000\002\005\007\000\002\005\007\000\002\014\014\000" +
    "\002\015\005\000\002\015\004\000\002\015\004\000\002" +
    "\020\004\000\002\021\004\000\002\016\011\000\002\017" +
    "\013\000\002\025\012\000\002\025\011\000\002\026\006" +
    "\000\002\026\004\000\002\027\010\000\002\027\007\000" +
    "\002\030\005\000\002\030\003\000\002\024\004\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\004\000\002\024" +
    "\005\000\002\024\006\000\002\024\006\000\002\024\006" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\006\000\002\024\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\050\003\027\010\016\013\012\014\024\015" +
    "\007\016\033\017\035\020\005\057\030\060\010\061\047" +
    "\062\025\064\021\065\017\066\040\067\050\070\014\071" +
    "\031\073\037\001\002\000\054\002\ufff1\003\ufff1\010\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\034" +
    "\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\067\ufff1\070\ufff1\071\ufff1\073\ufff1\001\002\000" +
    "\012\010\uffdc\035\uffdc\041\uffdc\056\uffdc\001\002\000\004" +
    "\010\324\001\002\000\012\010\uffdf\035\uffdf\041\uffdf\056" +
    "\uffdf\001\002\000\004\010\uffe4\001\002\000\054\002\ufff4" +
    "\003\ufff4\010\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\034\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4" +
    "\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\073" +
    "\ufff4\001\002\000\004\031\320\001\002\000\054\002\ufff3" +
    "\003\ufff3\010\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\034\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\073" +
    "\ufff3\001\002\000\004\056\317\001\002\000\054\002\ufffe" +
    "\003\ufffe\010\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\034\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe" +
    "\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\073" +
    "\ufffe\001\002\000\010\027\312\030\310\041\311\001\002" +
    "\000\004\031\272\001\002\000\052\002\000\003\027\010" +
    "\016\013\012\014\024\015\007\016\033\017\035\020\005" +
    "\057\030\060\010\061\047\062\025\064\021\065\017\066" +
    "\040\067\050\070\014\071\031\073\037\001\002\000\026" +
    "\004\057\005\062\006\060\007\071\010\064\011\063\012" +
    "\066\022\061\031\065\053\067\001\002\000\054\002\ufff8" +
    "\003\ufff8\010\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\034\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\073" +
    "\ufff8\001\002\000\004\010\213\001\002\000\012\010\uffe0" +
    "\035\uffe0\041\uffe0\056\uffe0\001\002\000\004\031\200\001" +
    "\002\000\054\002\ufff2\003\ufff2\010\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\034\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\062\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2" +
    "\070\ufff2\071\ufff2\073\ufff2\001\002\000\056\002\uffef\003" +
    "\uffef\010\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\034\uffef\056\177\057\uffef\060\uffef\061\uffef\062" +
    "\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef" +
    "\073\uffef\001\002\000\004\056\176\001\002\000\012\010" +
    "\uffdb\035\uffdb\041\uffdb\056\uffdb\001\002\000\054\002\ufffb" +
    "\003\ufffb\010\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\034\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\073" +
    "\ufffb\001\002\000\012\010\uffdd\035\uffdd\041\uffdd\056\uffdd" +
    "\001\002\000\054\002\ufffc\003\ufffc\010\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\034\ufffc\057\ufffc" +
    "\060\ufffc\061\ufffc\062\ufffc\064\ufffc\065\ufffc\066\ufffc\067" +
    "\ufffc\070\ufffc\071\ufffc\073\ufffc\001\002\000\012\010\uffde" +
    "\035\uffde\041\uffde\056\uffde\001\002\000\054\002\ufff9\003" +
    "\ufff9\010\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\034\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\064" +
    "\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\073\ufff9" +
    "\001\002\000\004\010\164\001\002\000\004\031\156\001" +
    "\002\000\054\002\ufffd\003\ufffd\010\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\034\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd" +
    "\070\ufffd\071\ufffd\073\ufffd\001\002\000\054\002\ufffa\003" +
    "\ufffa\010\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\034\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\064" +
    "\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\073\ufffa" +
    "\001\002\000\054\002\ufff7\003\ufff7\010\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\034\ufff7\057\ufff7" +
    "\060\ufff7\061\ufff7\062\ufff7\064\ufff7\065\ufff7\066\ufff7\067" +
    "\ufff7\070\ufff7\071\ufff7\073\ufff7\001\002\000\004\002\155" +
    "\001\002\000\054\002\ufff6\003\ufff6\010\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\034\ufff6\057\ufff6" +
    "\060\ufff6\061\ufff6\062\ufff6\064\ufff6\065\ufff6\066\ufff6\067" +
    "\ufff6\070\ufff6\071\ufff6\073\ufff6\001\002\000\054\002\ufff5" +
    "\003\ufff5\010\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\034\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5" +
    "\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\073" +
    "\ufff5\001\002\000\004\010\uffe5\001\002\000\004\033\051" +
    "\001\002\000\050\003\027\010\016\013\012\014\024\015" +
    "\007\016\033\017\035\020\005\057\030\060\010\061\047" +
    "\062\025\064\021\065\017\066\040\067\050\070\014\071" +
    "\031\073\037\001\002\000\052\003\027\010\016\013\012" +
    "\014\024\015\007\016\033\017\035\020\005\034\054\057" +
    "\030\060\010\061\047\062\025\064\021\065\017\066\040" +
    "\067\050\070\014\071\031\073\037\001\002\000\054\002" +
    "\uffff\003\uffff\010\uffff\013\uffff\014\uffff\015\uffff\016\uffff" +
    "\017\uffff\020\uffff\034\uffff\057\uffff\060\uffff\061\uffff\062" +
    "\uffff\064\uffff\065\uffff\066\uffff\067\uffff\070\uffff\071\uffff" +
    "\073\uffff\001\002\000\004\066\055\001\002\000\004\031" +
    "\056\001\002\000\026\004\057\005\062\006\060\007\071" +
    "\010\064\011\063\012\066\022\061\031\065\053\067\001" +
    "\002\000\054\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab" +
    "\026\uffab\032\uffab\033\uffab\036\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\054\uffab\056\uffab\072\uffab\001\002\000\054\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\025\uffac\026\uffac\032\uffac\033\uffac" +
    "\036\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\054\uffac\056\uffac\072\uffac" +
    "\001\002\000\026\004\057\005\062\006\060\007\071\010" +
    "\064\011\063\012\066\022\061\031\065\053\067\001\002" +
    "\000\054\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026" +
    "\uffad\032\uffad\033\uffad\036\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\054" +
    "\uffad\056\uffad\072\uffad\001\002\000\054\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\032\uffaa\033\uffaa\036" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\050\uffaa\051\uffaa\052\uffaa\054\uffaa\056\uffaa\072\uffaa\001" +
    "\002\000\056\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7" +
    "\026\uffa7\032\uffa7\033\uffa7\035\146\036\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\054\uffa7\056\uffa7\072\uffa7\001\002\000\034\004" +
    "\057\005\062\006\060\007\071\010\064\011\063\012\066" +
    "\014\134\015\133\016\135\022\061\031\065\053\067\001" +
    "\002\000\054\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\032\uffa9\033\uffa9\036\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\054\uffa9\056\uffa9\072\uffa9\001\002\000\026\004\057\005" +
    "\062\006\060\007\071\010\064\011\063\012\066\022\061" +
    "\031\065\053\067\001\002\000\042\021\102\022\075\023" +
    "\101\024\105\025\074\026\106\032\104\042\077\043\107" +
    "\044\103\045\111\046\076\047\100\050\110\051\072\052" +
    "\073\001\002\000\054\021\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\032\uffa8\033\uffa8\036\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\054\uffa8\056\uffa8\072\uffa8\001\002\000\026\004" +
    "\057\005\062\006\060\007\071\010\064\011\063\012\066" +
    "\022\061\031\065\053\067\001\002\000\026\004\057\005" +
    "\062\006\060\007\071\010\064\011\063\012\066\022\061" +
    "\031\065\053\067\001\002\000\026\004\057\005\062\006" +
    "\060\007\071\010\064\011\063\012\066\022\061\031\065" +
    "\053\067\001\002\000\026\004\057\005\062\006\060\007" +
    "\071\010\064\011\063\012\066\022\061\031\065\053\067" +
    "\001\002\000\026\004\057\005\062\006\060\007\071\010" +
    "\064\011\063\012\066\022\061\031\065\053\067\001\002" +
    "\000\026\004\057\005\062\006\060\007\071\010\064\011" +
    "\063\012\066\022\061\031\065\053\067\001\002\000\026" +
    "\004\057\005\062\006\060\007\071\010\064\011\063\012" +
    "\066\022\061\031\065\053\067\001\002\000\026\004\057" +
    "\005\062\006\060\007\071\010\064\011\063\012\066\022" +
    "\061\031\065\053\067\001\002\000\026\004\057\005\062" +
    "\006\060\007\071\010\064\011\063\012\066\022\061\031" +
    "\065\053\067\001\002\000\026\004\057\005\062\006\060" +
    "\007\071\010\064\011\063\012\066\022\061\031\065\053" +
    "\067\001\002\000\004\056\117\001\002\000\026\004\057" +
    "\005\062\006\060\007\071\010\064\011\063\012\066\022" +
    "\061\031\065\053\067\001\002\000\026\004\057\005\062" +
    "\006\060\007\071\010\064\011\063\012\066\022\061\031" +
    "\065\053\067\001\002\000\026\004\057\005\062\006\060" +
    "\007\071\010\064\011\063\012\066\022\061\031\065\053" +
    "\067\001\002\000\026\004\057\005\062\006\060\007\071" +
    "\010\064\011\063\012\066\022\061\031\065\053\067\001" +
    "\002\000\026\004\057\005\062\006\060\007\071\010\064" +
    "\011\063\012\066\022\061\031\065\053\067\001\002\000" +
    "\054\021\102\022\075\023\101\024\105\025\074\026\106" +
    "\032\uffb8\033\uffb8\036\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\054\uffb8" +
    "\056\uffb8\072\uffb8\001\002\000\054\021\102\022\075\023" +
    "\101\024\105\025\074\026\106\032\uffb5\033\uffb5\036\uffb5" +
    "\042\077\043\107\044\103\045\111\046\076\047\100\050" +
    "\uffb5\051\072\052\073\054\uffb5\056\uffb5\072\uffb5\001\002" +
    "\000\054\021\102\022\075\023\101\024\105\025\074\026" +
    "\106\032\uffba\033\uffba\036\uffba\042\uffba\043\uffba\044\uffba" +
    "\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\054" +
    "\uffba\056\uffba\072\uffba\001\002\000\054\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\074\026\uffbf\032\uffbf\033\uffbf\036" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\054\uffbf\056\uffbf\072\uffbf\001" +
    "\002\000\054\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\074" +
    "\026\uffbd\032\uffbd\033\uffbd\036\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\054\uffbd\056\uffbd\072\uffbd\001\002\000\054\002\uffcb\003" +
    "\uffcb\010\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\034\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\073\uffcb" +
    "\001\002\000\054\021\102\022\075\023\101\024\105\025" +
    "\074\026\106\032\uffb9\033\uffb9\036\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\054\uffb9\056\uffb9\072\uffb9\001\002\000\054\021\uffc1" +
    "\022\uffc1\023\101\024\105\025\074\026\106\032\uffc1\033" +
    "\uffc1\036\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\054\uffc1\056\uffc1\072" +
    "\uffc1\001\002\000\054\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\074\026\uffbe\032\uffbe\033\uffbe\036\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\054\uffbe\056\uffbe\072\uffbe\001\002\000\054\021" +
    "\102\022\075\023\101\024\105\025\074\026\106\032\uffb6" +
    "\033\uffb6\036\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\056\uffb6" +
    "\072\uffb6\001\002\000\054\021\102\022\075\023\101\024" +
    "\105\025\074\026\106\032\uffbb\033\uffbb\036\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\054\uffbb\056\uffbb\072\uffbb\001\002\000\054" +
    "\021\102\022\075\023\101\024\105\025\074\026\106\032" +
    "\uffb7\033\uffb7\036\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7\056" +
    "\uffb7\072\uffb7\001\002\000\054\021\uffc0\022\uffc0\023\101" +
    "\024\105\025\074\026\106\032\uffc0\033\uffc0\036\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\054\uffc0\056\uffc0\072\uffc0\001\002\000" +
    "\052\021\uffbc\022\uffbc\023\uffbc\024\uffbc\026\uffbc\032\uffbc" +
    "\033\uffbc\036\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\054\uffbc\056\uffbc" +
    "\072\uffbc\001\002\000\054\021\102\022\075\023\101\024" +
    "\105\025\074\026\106\032\uffb3\033\uffb3\036\uffb3\042\077" +
    "\043\107\044\103\045\111\046\076\047\100\050\uffb3\051" +
    "\uffb3\052\uffb3\054\uffb3\056\uffb3\072\uffb3\001\002\000\054" +
    "\021\102\022\075\023\101\024\105\025\074\026\106\032" +
    "\uffb4\033\uffb4\036\uffb4\042\077\043\107\044\103\045\111" +
    "\046\076\047\100\050\uffb4\051\uffb4\052\073\054\uffb4\056" +
    "\uffb4\072\uffb4\001\002\000\054\021\102\022\075\023\101" +
    "\024\105\025\074\026\106\032\uffb2\033\uffb2\036\uffb2\042" +
    "\077\043\107\044\103\045\111\046\076\047\100\050\uffb2" +
    "\051\uffb2\052\uffb2\054\uffb2\056\uffb2\072\uffb2\001\002\000" +
    "\004\032\144\001\002\000\004\032\142\001\002\000\004" +
    "\032\140\001\002\000\042\021\102\022\075\023\101\024" +
    "\105\025\074\026\106\032\137\042\077\043\107\044\103" +
    "\045\111\046\076\047\100\050\110\051\072\052\073\001" +
    "\002\000\054\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\032\uffb1\033\uffb1\036\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\054\uffb1\056\uffb1\072\uffb1\001\002\000\026\004\057\005" +
    "\062\006\060\007\071\010\064\011\063\012\066\022\061" +
    "\031\065\053\067\001\002\000\054\021\102\022\075\023" +
    "\101\024\105\025\074\026\106\032\uffae\033\uffae\036\uffae" +
    "\042\077\043\107\044\103\045\111\046\076\047\100\050" +
    "\110\051\072\052\073\054\uffae\056\uffae\072\uffae\001\002" +
    "\000\026\004\057\005\062\006\060\007\071\010\064\011" +
    "\063\012\066\022\061\031\065\053\067\001\002\000\054" +
    "\021\102\022\075\023\101\024\105\025\074\026\106\032" +
    "\uffb0\033\uffb0\036\uffb0\042\077\043\107\044\103\045\111" +
    "\046\076\047\100\050\110\051\072\052\073\054\uffb0\056" +
    "\uffb0\072\uffb0\001\002\000\026\004\057\005\062\006\060" +
    "\007\071\010\064\011\063\012\066\022\061\031\065\053" +
    "\067\001\002\000\054\021\102\022\075\023\101\024\105" +
    "\025\074\026\106\032\uffaf\033\uffaf\036\uffaf\042\077\043" +
    "\107\044\103\045\111\046\076\047\100\050\110\051\072" +
    "\052\073\054\uffaf\056\uffaf\072\uffaf\001\002\000\026\004" +
    "\057\005\062\006\060\007\071\010\064\011\063\012\066" +
    "\022\061\031\065\053\067\001\002\000\042\021\102\022" +
    "\075\023\101\024\105\025\074\026\106\036\150\042\077" +
    "\043\107\044\103\045\111\046\076\047\100\050\110\051" +
    "\072\052\073\001\002\000\056\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\032\uffa6\033\uffa6\035\151\036" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\054\uffa6\056\uffa6\072\uffa6\001" +
    "\002\000\026\004\057\005\062\006\060\007\071\010\064" +
    "\011\063\012\066\022\061\031\065\053\067\001\002\000" +
    "\042\021\102\022\075\023\101\024\105\025\074\026\106" +
    "\036\153\042\077\043\107\044\103\045\111\046\076\047" +
    "\100\050\110\051\072\052\073\001\002\000\054\021\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\032\uffa5\033" +
    "\uffa5\036\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\051\uffa5\052\uffa5\054\uffa5\056\uffa5\072" +
    "\uffa5\001\002\000\054\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\032\uffc2\033\uffc2\036\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\054\uffc2\056\uffc2\072\uffc2\001\002\000\004\002" +
    "\001\001\002\000\026\004\057\005\062\006\060\007\071" +
    "\010\064\011\063\012\066\022\061\031\065\053\067\001" +
    "\002\000\042\021\102\022\075\023\101\024\105\025\074" +
    "\026\106\032\160\042\077\043\107\044\103\045\111\046" +
    "\076\047\100\050\110\051\072\052\073\001\002\000\004" +
    "\033\161\001\002\000\050\003\027\010\016\013\012\014" +
    "\024\015\007\016\033\017\035\020\005\057\030\060\010" +
    "\061\047\062\025\064\021\065\017\066\040\067\050\070" +
    "\014\071\031\073\037\001\002\000\052\003\027\010\016" +
    "\013\012\014\024\015\007\016\033\017\035\020\005\034" +
    "\163\057\030\060\010\061\047\062\025\064\021\065\017" +
    "\066\040\067\050\070\014\071\031\073\037\001\002\000" +
    "\054\002\uffcc\003\uffcc\010\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\034\uffcc\057\uffcc\060\uffcc\061" +
    "\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc" +
    "\071\uffcc\073\uffcc\001\002\000\004\031\165\001\002\000" +
    "\030\004\057\005\062\006\060\007\071\010\064\011\063" +
    "\012\066\022\061\031\065\032\166\053\067\001\002\000" +
    "\004\056\175\001\002\000\006\032\172\072\171\001\002" +
    "\000\044\021\102\022\075\023\101\024\105\025\074\026" +
    "\106\032\uffc3\042\077\043\107\044\103\045\111\046\076" +
    "\047\100\050\110\051\072\052\073\072\uffc3\001\002\000" +
    "\026\004\057\005\062\006\060\007\071\010\064\011\063" +
    "\012\066\022\061\031\065\053\067\001\002\000\004\056" +
    "\173\001\002\000\054\002\uffc6\003\uffc6\010\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\034\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\067\uffc6\070\uffc6\071\uffc6\073\uffc6\001\002\000\044\021" +
    "\102\022\075\023\101\024\105\025\074\026\106\032\uffc4" +
    "\042\077\043\107\044\103\045\111\046\076\047\100\050" +
    "\110\051\072\052\073\072\uffc4\001\002\000\054\002\uffc5" +
    "\003\uffc5\010\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\034\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\073" +
    "\uffc5\001\002\000\054\002\uffce\003\uffce\010\uffce\013\uffce" +
    "\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\034\uffce\057" +
    "\uffce\060\uffce\061\uffce\062\uffce\064\uffce\065\uffce\066\uffce" +
    "\067\uffce\070\uffce\071\uffce\073\uffce\001\002\000\054\002" +
    "\ufff0\003\ufff0\010\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\034\ufff0\057\ufff0\060\ufff0\061\ufff0\062" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0" +
    "\073\ufff0\001\002\000\026\004\057\005\062\006\060\007" +
    "\071\010\064\011\063\012\066\022\061\031\065\053\067" +
    "\001\002\000\042\021\102\022\075\023\101\024\105\025" +
    "\074\026\106\032\202\042\077\043\107\044\103\045\111" +
    "\046\076\047\100\050\110\051\072\052\073\001\002\000" +
    "\004\033\203\001\002\000\050\003\027\010\016\013\012" +
    "\014\024\015\007\016\033\017\035\020\005\057\030\060" +
    "\010\061\047\062\025\064\021\065\017\066\040\067\050" +
    "\070\014\071\031\073\037\001\002\000\052\003\027\010" +
    "\016\013\012\014\024\015\007\016\033\017\035\020\005" +
    "\034\205\057\030\060\010\061\047\062\025\064\021\065" +
    "\017\066\040\067\050\070\014\071\031\073\037\001\002" +
    "\000\056\002\uffda\003\uffda\010\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\034\uffda\057\uffda\060\uffda" +
    "\061\uffda\062\uffda\063\206\064\uffda\065\uffda\066\uffda\067" +
    "\uffda\070\uffda\071\uffda\073\uffda\001\002\000\006\033\207" +
    "\062\025\001\002\000\050\003\027\010\016\013\012\014" +
    "\024\015\007\016\033\017\035\020\005\057\030\060\010" +
    "\061\047\062\025\064\021\065\017\066\040\067\050\070" +
    "\014\071\031\073\037\001\002\000\054\002\uffd8\003\uffd8" +
    "\010\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\034\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\064\uffd8" +
    "\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8\073\uffd8\001" +
    "\002\000\052\003\027\010\016\013\012\014\024\015\007" +
    "\016\033\017\035\020\005\034\212\057\030\060\010\061" +
    "\047\062\025\064\021\065\017\066\040\067\050\070\014" +
    "\071\031\073\037\001\002\000\054\002\uffd9\003\uffd9\010" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\034\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\073\uffd9\001\002" +
    "\000\004\055\214\001\002\000\016\014\024\015\007\016" +
    "\033\017\035\020\005\071\031\001\002\000\010\035\220" +
    "\041\217\056\216\001\002\000\054\002\uffec\003\uffec\010" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\034\uffec\057\uffec\060\uffec\061\uffec\062\uffec\064\uffec\065" +
    "\uffec\066\uffec\067\uffec\070\uffec\071\uffec\073\uffec\001\002" +
    "\000\026\004\057\005\062\006\060\007\071\010\064\011" +
    "\063\012\066\022\061\031\065\053\067\001\002\000\004" +
    "\036\221\001\002\000\006\035\223\041\222\001\002\000" +
    "\004\035\244\001\002\000\004\036\224\001\002\000\004" +
    "\041\225\001\002\000\004\035\226\001\002\000\004\035" +
    "\230\001\002\000\006\036\237\072\236\001\002\000\026" +
    "\004\057\005\062\006\060\007\071\010\064\011\063\012" +
    "\066\022\061\031\065\053\067\001\002\000\044\021\102" +
    "\022\075\023\101\024\105\025\074\026\106\036\uffe8\042" +
    "\077\043\107\044\103\045\111\046\076\047\100\050\110" +
    "\051\072\052\073\072\uffe8\001\002\000\006\036\234\072" +
    "\233\001\002\000\026\004\057\005\062\006\060\007\071" +
    "\010\064\011\063\012\066\022\061\031\065\053\067\001" +
    "\002\000\006\036\uffe6\072\uffe6\001\002\000\044\021\102" +
    "\022\075\023\101\024\105\025\074\026\106\036\uffe9\042" +
    "\077\043\107\044\103\045\111\046\076\047\100\050\110" +
    "\051\072\052\073\072\uffe9\001\002\000\004\035\241\001" +
    "\002\000\004\056\240\001\002\000\054\002\uffea\003\uffea" +
    "\010\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\034\uffea\057\uffea\060\uffea\061\uffea\062\uffea\064\uffea" +
    "\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea\073\uffea\001" +
    "\002\000\026\004\057\005\062\006\060\007\071\010\064" +
    "\011\063\012\066\022\061\031\065\053\067\001\002\000" +
    "\006\036\243\072\233\001\002\000\006\036\uffe7\072\uffe7" +
    "\001\002\000\026\004\057\005\062\006\060\007\071\010" +
    "\064\011\063\012\066\022\061\031\065\053\067\001\002" +
    "\000\006\036\246\072\233\001\002\000\004\056\247\001" +
    "\002\000\054\002\uffeb\003\uffeb\010\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\034\uffeb\057\uffeb\060" +
    "\uffeb\061\uffeb\062\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\073\uffeb\001\002\000\042\021\102\022" +
    "\075\023\101\024\105\025\074\026\106\042\077\043\107" +
    "\044\103\045\111\046\076\047\100\050\110\051\072\052" +
    "\073\056\251\001\002\000\054\002\uffed\003\uffed\010\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\034" +
    "\uffed\057\uffed\060\uffed\061\uffed\062\uffed\064\uffed\065\uffed" +
    "\066\uffed\067\uffed\070\uffed\071\uffed\073\uffed\001\002\000" +
    "\042\021\102\022\075\023\101\024\105\025\074\026\106" +
    "\033\253\042\077\043\107\044\103\045\111\046\076\047" +
    "\100\050\110\051\072\052\073\001\002\000\030\004\057" +
    "\005\062\006\060\007\071\010\064\011\063\012\066\022" +
    "\061\031\065\037\254\053\067\001\002\000\004\054\266" +
    "\001\002\000\032\004\057\005\062\006\060\007\071\010" +
    "\064\011\063\012\066\022\061\031\065\034\264\037\254" +
    "\053\067\001\002\000\032\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\022\uffd5\031\uffd5\034\uffd5" +
    "\037\uffd5\053\uffd5\001\002\000\042\021\102\022\075\023" +
    "\101\024\105\025\074\026\106\042\077\043\107\044\103" +
    "\045\111\046\076\047\100\050\110\051\072\052\073\054" +
    "\260\001\002\000\004\033\261\001\002\000\050\003\027" +
    "\010\016\013\012\014\024\015\007\016\033\017\035\020" +
    "\005\057\030\060\010\061\047\062\025\064\021\065\017" +
    "\066\040\067\050\070\014\071\031\073\037\001\002\000" +
    "\052\003\027\010\016\013\012\014\024\015\007\016\033" +
    "\017\035\020\005\034\263\057\030\060\010\061\047\062" +
    "\025\064\021\065\017\066\040\067\050\070\014\071\031" +
    "\073\037\001\002\000\032\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\022\uffd4\031\uffd4\034\uffd4" +
    "\037\uffd4\053\uffd4\001\002\000\054\002\uffd7\003\uffd7\010" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\034\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\064\uffd7\065" +
    "\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\073\uffd7\001\002" +
    "\000\032\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\022\uffd6\031\uffd6\034\uffd6\037\uffd6\053\uffd6" +
    "\001\002\000\004\033\267\001\002\000\050\003\027\010" +
    "\016\013\012\014\024\015\007\016\033\017\035\020\005" +
    "\057\030\060\010\061\047\062\025\064\021\065\017\066" +
    "\040\067\050\070\014\071\031\073\037\001\002\000\052" +
    "\003\027\010\016\013\012\014\024\015\007\016\033\017" +
    "\035\020\005\034\271\057\030\060\010\061\047\062\025" +
    "\064\021\065\017\066\040\067\050\070\014\071\031\073" +
    "\037\001\002\000\032\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\022\uffd3\031\uffd3\034\uffd3\037" +
    "\uffd3\053\uffd3\001\002\000\004\010\016\001\002\000\026" +
    "\004\057\005\062\006\060\007\071\010\064\011\063\012" +
    "\066\022\061\031\065\053\067\001\002\000\042\021\102" +
    "\022\075\023\101\024\105\025\074\026\106\042\077\043" +
    "\107\044\103\045\111\046\076\047\100\050\110\051\072" +
    "\052\073\056\275\001\002\000\004\010\276\001\002\000" +
    "\010\027\306\030\304\041\305\001\002\000\004\032\300" +
    "\001\002\000\004\033\301\001\002\000\050\003\027\010" +
    "\016\013\012\014\024\015\007\016\033\017\035\020\005" +
    "\057\030\060\010\061\047\062\025\064\021\065\017\066" +
    "\040\067\050\070\014\071\031\073\037\001\002\000\052" +
    "\003\027\010\016\013\012\014\024\015\007\016\033\017" +
    "\035\020\005\034\303\057\030\060\010\061\047\062\025" +
    "\064\021\065\017\066\040\067\050\070\014\071\031\073" +
    "\037\001\002\000\054\002\uffd2\003\uffd2\010\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\034\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\070\uffd2\071\uffd2\073\uffd2\001\002\000\004\032" +
    "\uffcf\001\002\000\026\004\057\005\062\006\060\007\071" +
    "\010\064\011\063\012\066\022\061\031\065\053\067\001" +
    "\002\000\004\032\uffd0\001\002\000\042\021\102\022\075" +
    "\023\101\024\105\025\074\026\106\032\uffd1\042\077\043" +
    "\107\044\103\045\111\046\076\047\100\050\110\051\072" +
    "\052\073\001\002\000\004\056\316\001\002\000\026\004" +
    "\057\005\062\006\060\007\071\010\064\011\063\012\066" +
    "\022\061\031\065\053\067\001\002\000\004\056\313\001" +
    "\002\000\076\002\uffe2\003\uffe2\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\031\uffe2\034\uffe2" +
    "\053\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\073\uffe2\001\002" +
    "\000\042\021\102\022\075\023\101\024\105\025\074\026" +
    "\106\042\077\043\107\044\103\045\111\046\076\047\100" +
    "\050\110\051\072\052\073\056\315\001\002\000\076\002" +
    "\uffe3\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\022\uffe3\031\uffe3\034\uffe3\053\uffe3\057\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\064\uffe3\065\uffe3\066\uffe3\067" +
    "\uffe3\070\uffe3\071\uffe3\073\uffe3\001\002\000\076\002\uffe1" +
    "\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\022\uffe1\031\uffe1\034\uffe1\053\uffe1\057\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1" +
    "\070\uffe1\071\uffe1\073\uffe1\001\002\000\054\002\uffcd\003" +
    "\uffcd\010\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\034\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\073\uffcd" +
    "\001\002\000\026\004\057\005\062\006\060\007\071\010" +
    "\064\011\063\012\066\022\061\031\065\053\067\001\002" +
    "\000\042\021\102\022\075\023\101\024\105\025\074\026" +
    "\106\032\322\042\077\043\107\044\103\045\111\046\076" +
    "\047\100\050\110\051\072\052\073\001\002\000\004\056" +
    "\323\001\002\000\054\002\uffee\003\uffee\010\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\034\uffee\057" +
    "\uffee\060\uffee\061\uffee\062\uffee\064\uffee\065\uffee\066\uffee" +
    "\067\uffee\070\uffee\071\uffee\073\uffee\001\002\000\004\031" +
    "\325\001\002\000\020\014\024\015\007\016\033\017\035" +
    "\020\005\032\327\071\031\001\002\000\006\032\336\072" +
    "\335\001\002\000\004\033\332\001\002\000\004\010\331" +
    "\001\002\000\006\032\uffc7\072\uffc7\001\002\000\050\003" +
    "\027\010\016\013\012\014\024\015\007\016\033\017\035" +
    "\020\005\057\030\060\010\061\047\062\025\064\021\065" +
    "\017\066\040\067\050\070\014\071\031\073\037\001\002" +
    "\000\052\003\027\010\016\013\012\014\024\015\007\016" +
    "\033\017\035\020\005\034\334\057\030\060\010\061\047" +
    "\062\025\064\021\065\017\066\040\067\050\070\014\071" +
    "\031\073\037\001\002\000\054\002\uffc9\003\uffc9\010\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\034" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9" +
    "\066\uffc9\067\uffc9\070\uffc9\071\uffc9\073\uffc9\001\002\000" +
    "\016\014\024\015\007\016\033\017\035\020\005\071\031" +
    "\001\002\000\004\033\337\001\002\000\050\003\027\010" +
    "\016\013\012\014\024\015\007\016\033\017\035\020\005" +
    "\057\030\060\010\061\047\062\025\064\021\065\017\066" +
    "\040\067\050\070\014\071\031\073\037\001\002\000\052" +
    "\003\027\010\016\013\012\014\024\015\007\016\033\017" +
    "\035\020\005\034\341\057\030\060\010\061\047\062\025" +
    "\064\021\065\017\066\040\067\050\070\014\071\031\073" +
    "\037\001\002\000\054\002\uffca\003\uffca\010\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\034\uffca\057" +
    "\uffca\060\uffca\061\uffca\062\uffca\064\uffca\065\uffca\066\uffca" +
    "\067\uffca\070\uffca\071\uffca\073\uffca\001\002\000\004\010" +
    "\343\001\002\000\006\032\uffc8\072\uffc8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\046\002\043\003\017\006\014\007\040\010" +
    "\033\011\031\012\041\013\010\014\035\016\021\017\042" +
    "\020\044\021\045\022\005\023\022\025\012\027\025\031" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\052\007\040\010\033\011\031\012\041\013\010" +
    "\014\035\016\021\017\042\020\044\021\045\022\005\023" +
    "\022\025\012\027\025\031\003\001\001\000\004\024\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\051\006\014\007\040\010\033" +
    "\011\031\012\041\013\010\014\035\016\021\017\042\020" +
    "\044\021\045\022\005\023\022\025\012\027\025\031\003" +
    "\001\001\000\042\006\052\007\040\010\033\011\031\012" +
    "\041\013\010\014\035\016\021\017\042\020\044\021\045" +
    "\022\005\023\022\025\012\027\025\031\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\135\001\001\000\002\001" +
    "\001\000\004\024\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\130\001\001\000\004\024\127\001" +
    "\001\000\004\024\126\001\001\000\004\024\125\001\001" +
    "\000\004\024\124\001\001\000\004\024\123\001\001\000" +
    "\004\024\122\001\001\000\004\024\121\001\001\000\004" +
    "\024\120\001\001\000\004\024\117\001\001\000\002\001" +
    "\001\000\004\024\115\001\001\000\004\024\114\001\001" +
    "\000\004\024\113\001\001\000\004\024\112\001\001\000" +
    "\004\024\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\140\001\001\000\002\001\001\000" +
    "\004\024\142\001\001\000\002\001\001\000\004\024\144" +
    "\001\001\000\002\001\001\000\004\024\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\161\006\014\007\040\010" +
    "\033\011\031\012\041\013\010\014\035\016\021\017\042" +
    "\020\044\021\045\022\005\023\022\025\012\027\025\031" +
    "\003\001\001\000\042\006\052\007\040\010\033\011\031" +
    "\012\041\013\010\014\035\016\021\017\042\020\044\021" +
    "\045\022\005\023\022\025\012\027\025\031\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\167\030" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\003\203\006\014" +
    "\007\040\010\033\011\031\012\041\013\010\014\035\016" +
    "\021\017\042\020\044\021\045\022\005\023\022\025\012" +
    "\027\025\031\003\001\001\000\042\006\052\007\040\010" +
    "\033\011\031\012\041\013\010\014\035\016\021\017\042" +
    "\020\044\021\045\022\005\023\022\025\012\027\025\031" +
    "\003\001\001\000\002\001\001\000\004\012\207\001\001" +
    "\000\044\003\210\006\014\007\040\010\033\011\031\012" +
    "\041\013\010\014\035\016\021\017\042\020\044\021\045" +
    "\022\005\023\022\025\012\027\025\031\003\001\001\000" +
    "\002\001\001\000\042\006\052\007\040\010\033\011\031" +
    "\012\041\013\010\014\035\016\021\017\042\020\044\021" +
    "\045\022\005\023\022\025\012\027\025\031\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\226\001\001\000\002\001\001\000\006\024" +
    "\230\032\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\230\032\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\230\032\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\254" +
    "\005\255\024\256\001\001\000\002\001\001\000\006\005" +
    "\264\024\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\261\006\014\007\040\010" +
    "\033\011\031\012\041\013\010\014\035\016\021\017\042" +
    "\020\044\021\045\022\005\023\022\025\012\027\025\031" +
    "\003\001\001\000\042\006\052\007\040\010\033\011\031" +
    "\012\041\013\010\014\035\016\021\017\042\020\044\021" +
    "\045\022\005\023\022\025\012\027\025\031\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\267\006\014\007\040\010\033" +
    "\011\031\012\041\013\010\014\035\016\021\017\042\020" +
    "\044\021\045\022\005\023\022\025\012\027\025\031\003" +
    "\001\001\000\042\006\052\007\040\010\033\011\031\012" +
    "\041\013\010\014\035\016\021\017\042\020\044\021\045" +
    "\022\005\023\022\025\012\027\025\031\003\001\001\000" +
    "\002\001\001\000\004\011\272\001\001\000\004\024\273" +
    "\001\001\000\002\001\001\000\004\015\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\301\006\014\007\040\010\033\011\031\012\041\013" +
    "\010\014\035\016\021\017\042\020\044\021\045\022\005" +
    "\023\022\025\012\027\025\031\003\001\001\000\042\006" +
    "\052\007\040\010\033\011\031\012\041\013\010\014\035" +
    "\016\021\017\042\020\044\021\045\022\005\023\022\025" +
    "\012\027\025\031\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\306\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\327\026\325" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\332\006\014\007\040" +
    "\010\033\011\031\012\041\013\010\014\035\016\021\017" +
    "\042\020\044\021\045\022\005\023\022\025\012\027\025" +
    "\031\003\001\001\000\042\006\052\007\040\010\033\011" +
    "\031\012\041\013\010\014\035\016\021\017\042\020\044" +
    "\021\045\022\005\023\022\025\012\027\025\031\003\001" +
    "\001\000\002\001\001\000\004\022\341\001\001\000\002" +
    "\001\001\000\044\003\337\006\014\007\040\010\033\011" +
    "\031\012\041\013\010\014\035\016\021\017\042\020\044" +
    "\021\045\022\005\023\022\025\012\027\025\031\003\001" +
    "\001\000\042\006\052\007\040\010\033\011\031\012\041" +
    "\013\010\014\035\016\021\017\042\020\044\021\045\022" +
    "\005\023\022\025\012\027\025\031\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CDO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SALIDA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CONTINIU 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= Start_WITH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= DECLARACION_VECTORES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(d, b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(d, b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_VECTORES ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS COR1 COR2 IGUAL COR1 LISTAVALORES1 COR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                                                                                                                    RESULT = new Declaracion_Vectores(b, d, null, a, c, aleft, aright);
                                                                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_VECTORES ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS COR1 COR2 COR1 COR2 IGUAL COR1 LISTAVALORES2 COR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> d = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                LinkedList<LinkedList<Instruccion>> valores_2D = d;
                LinkedList<Instruccion> valores1 = new LinkedList<>();
                LinkedList<Instruccion> valores2 = new LinkedList<>();
                //ITERAR VALORES_2D PARA SEPARAR VALORES DE FILA Y COLUMNA
                for(LinkedList<Instruccion> sublista: valores_2D){
                    for(int i = 0; i < sublista.size(); i++){
                        // Distribuir elementos de sublist en valores1 y valores2
                        if( i == 0 ){
                            valores1.add(sublista.get(i));
                        } else if ( i == 1 ){
                            valores2.add(sublista.get(i));
                        }
                    }
                }
                RESULT = new Declaracion_Vectores(b, valores1, valores2, a, c, aleft, aright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTAVALORES1 ::= LISTAVALORES1 COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTAVALORES1 ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTAVALORES2 ::= LISTAVALORES2 COMA COR1 LISTAVALORES1 COR2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTAVALORES2 ::= COR1 LISTAVALORES1 COR2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MUTABILIDAD ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MUTABILIDAD ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACION ::= ID_VARIABLE IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= ID_VARIABLE INCREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.INCREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION ::= ID_VARIABLE DECREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.DECREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPOS ::= TYPE_INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPOS ::= TYPE_DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPOS ::= TYPE_STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPOS ::= TYPE_CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPOS ::= TYPE_BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SIF ::= IF PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SIF ::= IF PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 ELSE LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c,  aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SIF ::= IF PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF_ELSE_IF(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SMATCH ::= MATCH EXPRESION LLAV1 CASES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Cases_Match> b = (LinkedList<Cases_Match>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASES ::= CASES CASE 
            {
              LinkedList<Cases_Match> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Cases_Match> a = (LinkedList<Cases_Match>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cases_Match b = (Cases_Match)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASES ::= CASE 
            {
              LinkedList<Cases_Match> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cases_Match a = (Cases_Match)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASE ::= EXPRESION FLECHA LLAV1 INSTRUCCIONES LLAV2 
            {
              Cases_Match RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Cases_Match(a, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASE ::= DEFAULT_MATCH FLECHA LLAV1 INSTRUCCIONES LLAV2 
            {
              Cases_Match RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Cases_Match(null, a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ACTUALIZA_FOR ::= ID_VARIABLE IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ACTUALIZA_FOR ::= ID_VARIABLE INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.INCREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ACTUALIZA_FOR ::= ID_VARIABLE DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.DECREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SALIDA ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SALIDA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTINIU ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINIU",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CDO_WHILE ::= DO LLAV1 INSTRUCCIONES LLAV2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Do_While(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDO_WHILE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // METODO ::= TIPOS ID_VARIABLE PAR1 PARAMS PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, p, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METODO ::= TIPOS ID_VARIABLE PAR1 PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMS ::= PARAMS COMA TIPOS ID_VARIABLE 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                                RESULT = a;
                                                                var hm2 = new HashMap<String, Object>();
                                                                hm2.put("id", c);
                                                                hm2.put("tipo", b);
                                                                RESULT.add(hm2);
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMS ::= TIPOS ID_VARIABLE 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>();
                                                                var hm = new HashMap<String, Object>();
                                                                hm.put("id",b);
                                                                hm.put("tipo",a); 
                                                                RESULT.add(hm);
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Start_WITH ::= START_WITH ID_VARIABLE PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Execute(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Start_WITH",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Start_WITH ::= START_WITH ID_VARIABLE PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Execute(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Start_WITH",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        RESULT = a; 
                                                        RESULT.add(b);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        RESULT = new LinkedList<Instruccion>(); 
                                                        RESULT.add(a);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION IGUAL_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION DIFERENTE_DE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION MENOR_QUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION MAYOR_QUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= PAR1 TYPE_INT PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, OperadoresCasteo.INT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= PAR1 TYPE_DOUBLE PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, OperadoresCasteo.DOUBLE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= PAR1 TYPE_CHAR PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, OperadoresCasteo.CHAR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Double.valueOf(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= CHAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a.charAt(1), new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= ID_VARIABLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= ID_VARIABLE COR1 EXPRESION COR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVec(a, b, null, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= ID_VARIABLE COR1 EXPRESION COR2 COR1 EXPRESION COR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVec(a, b, c, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
