
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.sentencias_Control.If;
import instrucciones.sentencias_Control.IF_ELSE_IF;
import instrucciones.sentencias_Control.Match;
import instrucciones.sentencias_Control.Cases_Match;
import instrucciones.sentencias_Ciclicas.For;
import instrucciones.sentencias_Ciclicas.While;
import instrucciones.sentencias_Ciclicas.Do_While;
import instrucciones.sentencias_Transferencia.Break;
import instrucciones.sentencias_Transferencia.Continue;
import instrucciones.subrutina.Metodo;
import instrucciones.subrutina.Execute;
import instrucciones.vectores.Declaracion_Vectores;
import instrucciones.vectores.AsignacionVec;
import expresiones.Nativo;
import expresiones.aritmeticas.Aritmeticas;
import expresiones.aritmeticas.OperadoresAritmeticos;
import expresiones.relacionales.OperadoresRelacionales;
import expresiones.relacionales.Relacionales;
import expresiones.logicas.OperadoresLogicos;
import expresiones.logicas.Logicas;
import expresiones.casteo.Casteos;
import expresiones.casteo.OperadoresCasteo;
import expresiones.variable.AccesoVar;
import expresiones.variable.OperadoresVariable;
import expresiones.vectores.AccesoVec;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\004" +
    "\000\002\006\003\000\002\007\007\000\002\010\011\000" +
    "\002\010\007\000\002\031\015\000\002\031\017\000\002" +
    "\032\005\000\002\032\003\000\002\033\007\000\002\033" +
    "\005\000\002\023\003\000\002\023\003\000\002\011\006" +
    "\000\002\011\005\000\002\011\005\000\002\034\011\000" +
    "\002\034\014\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\012\011\000\002\012\015\000\002\012\013" +
    "\000\002\013\007\000\002\004\004\000\002\004\003\000" +
    "\002\005\007\000\002\005\007\000\002\014\014\000\002" +
    "\015\005\000\002\015\004\000\002\015\004\000\002\020" +
    "\004\000\002\021\004\000\002\016\011\000\002\017\013" +
    "\000\002\025\012\000\002\025\011\000\002\026\006\000" +
    "\002\026\004\000\002\027\010\000\002\027\007\000\002" +
    "\030\005\000\002\030\003\000\002\024\004\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\004\000\002\024\005" +
    "\000\002\024\006\000\002\024\006\000\002\024\006\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\006\000\002\024\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\050\003\027\010\016\013\012\014\024\015" +
    "\007\016\034\017\036\020\005\057\031\060\010\061\050" +
    "\062\025\064\021\065\017\066\041\067\051\070\014\071" +
    "\032\073\040\001\002\000\054\002\ufff1\003\ufff1\010\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\034" +
    "\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\067\ufff1\070\ufff1\071\ufff1\073\ufff1\001\002\000" +
    "\012\010\uffd9\035\uffd9\041\uffd9\056\uffd9\001\002\000\004" +
    "\010\342\001\002\000\012\010\uffdc\035\uffdc\041\uffdc\056" +
    "\uffdc\001\002\000\004\010\uffe3\001\002\000\054\002\ufff4" +
    "\003\ufff4\010\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\034\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4" +
    "\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\073" +
    "\ufff4\001\002\000\004\031\336\001\002\000\054\002\ufff3" +
    "\003\ufff3\010\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\034\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\073" +
    "\ufff3\001\002\000\004\056\335\001\002\000\054\002\ufffe" +
    "\003\ufffe\010\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\034\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe" +
    "\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\073" +
    "\ufffe\001\002\000\012\027\300\030\276\035\321\041\277" +
    "\001\002\000\004\031\273\001\002\000\052\002\000\003" +
    "\027\010\016\013\012\014\024\015\007\016\034\017\036" +
    "\020\005\057\031\060\010\061\050\062\025\064\021\065" +
    "\017\066\041\067\051\070\014\071\032\073\040\001\002" +
    "\000\026\004\060\005\063\006\061\007\072\010\065\011" +
    "\064\012\066\022\062\031\067\053\070\001\002\000\054" +
    "\002\ufff8\003\ufff8\010\ufff8\013\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\020\ufff8\034\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071" +
    "\ufff8\073\ufff8\001\002\000\004\010\214\001\002\000\012" +
    "\010\uffdd\035\uffdd\041\uffdd\056\uffdd\001\002\000\004\031" +
    "\201\001\002\000\054\002\ufff2\003\ufff2\010\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\034\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\064\ufff2\065\ufff2\066\ufff2" +
    "\067\ufff2\070\ufff2\071\ufff2\073\ufff2\001\002\000\056\002" +
    "\uffee\003\uffee\010\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\034\uffee\056\200\057\uffee\060\uffee\061" +
    "\uffee\062\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee" +
    "\071\uffee\073\uffee\001\002\000\054\002\ufff0\003\ufff0\010" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\034\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\064\ufff0\065" +
    "\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\073\ufff0\001\002" +
    "\000\004\056\177\001\002\000\012\010\uffd8\035\uffd8\041" +
    "\uffd8\056\uffd8\001\002\000\054\002\ufffb\003\ufffb\010\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\034" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\071\ufffb\073\ufffb\001\002\000" +
    "\012\010\uffda\035\uffda\041\uffda\056\uffda\001\002\000\054" +
    "\002\ufffc\003\ufffc\010\ufffc\013\ufffc\014\ufffc\015\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\034\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071" +
    "\ufffc\073\ufffc\001\002\000\012\010\uffdb\035\uffdb\041\uffdb" +
    "\056\uffdb\001\002\000\054\002\ufff9\003\ufff9\010\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\034\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\062\ufff9\064\ufff9\065\ufff9\066" +
    "\ufff9\067\ufff9\070\ufff9\071\ufff9\073\ufff9\001\002\000\004" +
    "\010\165\001\002\000\004\031\157\001\002\000\054\002" +
    "\ufffd\003\ufffd\010\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\034\ufffd\057\ufffd\060\ufffd\061\ufffd\062" +
    "\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd" +
    "\073\ufffd\001\002\000\054\002\ufffa\003\ufffa\010\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\034\ufffa" +
    "\057\ufffa\060\ufffa\061\ufffa\062\ufffa\064\ufffa\065\ufffa\066" +
    "\ufffa\067\ufffa\070\ufffa\071\ufffa\073\ufffa\001\002\000\054" +
    "\002\ufff7\003\ufff7\010\ufff7\013\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\034\ufff7\057\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071" +
    "\ufff7\073\ufff7\001\002\000\004\002\156\001\002\000\054" +
    "\002\ufff6\003\ufff6\010\ufff6\013\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\034\ufff6\057\ufff6\060\ufff6\061\ufff6" +
    "\062\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071" +
    "\ufff6\073\ufff6\001\002\000\054\002\ufff5\003\ufff5\010\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\034" +
    "\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\064\ufff5\065\ufff5" +
    "\066\ufff5\067\ufff5\070\ufff5\071\ufff5\073\ufff5\001\002\000" +
    "\004\010\uffe4\001\002\000\004\033\052\001\002\000\050" +
    "\003\027\010\016\013\012\014\024\015\007\016\034\017" +
    "\036\020\005\057\031\060\010\061\050\062\025\064\021" +
    "\065\017\066\041\067\051\070\014\071\032\073\040\001" +
    "\002\000\052\003\027\010\016\013\012\014\024\015\007" +
    "\016\034\017\036\020\005\034\055\057\031\060\010\061" +
    "\050\062\025\064\021\065\017\066\041\067\051\070\014" +
    "\071\032\073\040\001\002\000\054\002\uffff\003\uffff\010" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff" +
    "\034\uffff\057\uffff\060\uffff\061\uffff\062\uffff\064\uffff\065" +
    "\uffff\066\uffff\067\uffff\070\uffff\071\uffff\073\uffff\001\002" +
    "\000\004\066\056\001\002\000\004\031\057\001\002\000" +
    "\026\004\060\005\063\006\061\007\072\010\065\011\064" +
    "\012\066\022\062\031\067\053\070\001\002\000\054\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\032\uffa8" +
    "\033\uffa8\036\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\054\uffa8\056\uffa8" +
    "\072\uffa8\001\002\000\054\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\032\uffa9\033\uffa9\036\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\054\uffa9\056\uffa9\072\uffa9\001\002\000\026" +
    "\004\060\005\063\006\061\007\072\010\065\011\064\012" +
    "\066\022\062\031\067\053\070\001\002\000\054\021\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\032\uffaa\033" +
    "\uffaa\036\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\052\uffaa\054\uffaa\056\uffaa\072" +
    "\uffaa\001\002\000\054\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\032\uffa7\033\uffa7\036\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\054\uffa7\056\uffa7\072\uffa7\001\002\000\056\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\032\uffa4" +
    "\033\uffa4\035\147\036\uffa4\042\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\054\uffa4" +
    "\056\uffa4\072\uffa4\001\002\000\054\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\032\uffa6\033\uffa6\036\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\052\uffa6\054\uffa6\056\uffa6\072\uffa6\001\002" +
    "\000\034\004\060\005\063\006\061\007\072\010\065\011" +
    "\064\012\066\014\135\015\134\016\136\022\062\031\067" +
    "\053\070\001\002\000\026\004\060\005\063\006\061\007" +
    "\072\010\065\011\064\012\066\022\062\031\067\053\070" +
    "\001\002\000\042\021\103\022\076\023\102\024\106\025" +
    "\075\026\107\032\105\042\100\043\110\044\104\045\112" +
    "\046\077\047\101\050\111\051\073\052\074\001\002\000" +
    "\054\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5" +
    "\032\uffa5\033\uffa5\036\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\054\uffa5" +
    "\056\uffa5\072\uffa5\001\002\000\026\004\060\005\063\006" +
    "\061\007\072\010\065\011\064\012\066\022\062\031\067" +
    "\053\070\001\002\000\026\004\060\005\063\006\061\007" +
    "\072\010\065\011\064\012\066\022\062\031\067\053\070" +
    "\001\002\000\026\004\060\005\063\006\061\007\072\010" +
    "\065\011\064\012\066\022\062\031\067\053\070\001\002" +
    "\000\026\004\060\005\063\006\061\007\072\010\065\011" +
    "\064\012\066\022\062\031\067\053\070\001\002\000\026" +
    "\004\060\005\063\006\061\007\072\010\065\011\064\012" +
    "\066\022\062\031\067\053\070\001\002\000\026\004\060" +
    "\005\063\006\061\007\072\010\065\011\064\012\066\022" +
    "\062\031\067\053\070\001\002\000\026\004\060\005\063" +
    "\006\061\007\072\010\065\011\064\012\066\022\062\031" +
    "\067\053\070\001\002\000\026\004\060\005\063\006\061" +
    "\007\072\010\065\011\064\012\066\022\062\031\067\053" +
    "\070\001\002\000\026\004\060\005\063\006\061\007\072" +
    "\010\065\011\064\012\066\022\062\031\067\053\070\001" +
    "\002\000\026\004\060\005\063\006\061\007\072\010\065" +
    "\011\064\012\066\022\062\031\067\053\070\001\002\000" +
    "\004\056\120\001\002\000\026\004\060\005\063\006\061" +
    "\007\072\010\065\011\064\012\066\022\062\031\067\053" +
    "\070\001\002\000\026\004\060\005\063\006\061\007\072" +
    "\010\065\011\064\012\066\022\062\031\067\053\070\001" +
    "\002\000\026\004\060\005\063\006\061\007\072\010\065" +
    "\011\064\012\066\022\062\031\067\053\070\001\002\000" +
    "\026\004\060\005\063\006\061\007\072\010\065\011\064" +
    "\012\066\022\062\031\067\053\070\001\002\000\026\004" +
    "\060\005\063\006\061\007\072\010\065\011\064\012\066" +
    "\022\062\031\067\053\070\001\002\000\054\021\103\022" +
    "\076\023\102\024\106\025\075\026\107\032\uffb5\033\uffb5" +
    "\036\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\054\uffb5\056\uffb5\072\uffb5" +
    "\001\002\000\054\021\103\022\076\023\102\024\106\025" +
    "\075\026\107\032\uffb2\033\uffb2\036\uffb2\042\100\043\110" +
    "\044\104\045\112\046\077\047\101\050\uffb2\051\073\052" +
    "\074\054\uffb2\056\uffb2\072\uffb2\001\002\000\054\021\103" +
    "\022\076\023\102\024\106\025\075\026\107\032\uffb7\033" +
    "\uffb7\036\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7\056\uffb7\072" +
    "\uffb7\001\002\000\054\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\075\026\uffbc\032\uffbc\033\uffbc\036\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\054\uffbc\056\uffbc\072\uffbc\001\002\000\054\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\075\026\uffba\032\uffba" +
    "\033\uffba\036\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\054\uffba\056\uffba" +
    "\072\uffba\001\002\000\054\002\uffc8\003\uffc8\010\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\034\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\073\uffc8\001\002\000\054" +
    "\021\103\022\076\023\102\024\106\025\075\026\107\032" +
    "\uffb6\033\uffb6\036\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\056" +
    "\uffb6\072\uffb6\001\002\000\054\021\uffbe\022\uffbe\023\102" +
    "\024\106\025\075\026\107\032\uffbe\033\uffbe\036\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\054\uffbe\056\uffbe\072\uffbe\001\002\000" +
    "\054\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\075\026\uffbb" +
    "\032\uffbb\033\uffbb\036\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb" +
    "\056\uffbb\072\uffbb\001\002\000\054\021\103\022\076\023" +
    "\102\024\106\025\075\026\107\032\uffb3\033\uffb3\036\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\054\uffb3\056\uffb3\072\uffb3\001\002" +
    "\000\054\021\103\022\076\023\102\024\106\025\075\026" +
    "\107\032\uffb8\033\uffb8\036\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\054" +
    "\uffb8\056\uffb8\072\uffb8\001\002\000\054\021\103\022\076" +
    "\023\102\024\106\025\075\026\107\032\uffb4\033\uffb4\036" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\054\uffb4\056\uffb4\072\uffb4\001" +
    "\002\000\054\021\uffbd\022\uffbd\023\102\024\106\025\075" +
    "\026\107\032\uffbd\033\uffbd\036\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\054\uffbd\056\uffbd\072\uffbd\001\002\000\052\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\026\uffb9\032\uffb9\033\uffb9\036\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\054\uffb9\056\uffb9\072\uffb9\001\002" +
    "\000\054\021\103\022\076\023\102\024\106\025\075\026" +
    "\107\032\uffb0\033\uffb0\036\uffb0\042\100\043\110\044\104" +
    "\045\112\046\077\047\101\050\uffb0\051\uffb0\052\uffb0\054" +
    "\uffb0\056\uffb0\072\uffb0\001\002\000\054\021\103\022\076" +
    "\023\102\024\106\025\075\026\107\032\uffb1\033\uffb1\036" +
    "\uffb1\042\100\043\110\044\104\045\112\046\077\047\101" +
    "\050\uffb1\051\uffb1\052\074\054\uffb1\056\uffb1\072\uffb1\001" +
    "\002\000\054\021\103\022\076\023\102\024\106\025\075" +
    "\026\107\032\uffaf\033\uffaf\036\uffaf\042\100\043\110\044" +
    "\104\045\112\046\077\047\101\050\uffaf\051\uffaf\052\uffaf" +
    "\054\uffaf\056\uffaf\072\uffaf\001\002\000\004\032\145\001" +
    "\002\000\004\032\143\001\002\000\004\032\141\001\002" +
    "\000\042\021\103\022\076\023\102\024\106\025\075\026" +
    "\107\032\140\042\100\043\110\044\104\045\112\046\077" +
    "\047\101\050\111\051\073\052\074\001\002\000\054\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\032\uffae" +
    "\033\uffae\036\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\054\uffae\056\uffae" +
    "\072\uffae\001\002\000\026\004\060\005\063\006\061\007" +
    "\072\010\065\011\064\012\066\022\062\031\067\053\070" +
    "\001\002\000\054\021\103\022\076\023\102\024\106\025" +
    "\075\026\107\032\uffab\033\uffab\036\uffab\042\100\043\110" +
    "\044\104\045\112\046\077\047\101\050\111\051\073\052" +
    "\074\054\uffab\056\uffab\072\uffab\001\002\000\026\004\060" +
    "\005\063\006\061\007\072\010\065\011\064\012\066\022" +
    "\062\031\067\053\070\001\002\000\054\021\103\022\076" +
    "\023\102\024\106\025\075\026\107\032\uffad\033\uffad\036" +
    "\uffad\042\100\043\110\044\104\045\112\046\077\047\101" +
    "\050\111\051\073\052\074\054\uffad\056\uffad\072\uffad\001" +
    "\002\000\026\004\060\005\063\006\061\007\072\010\065" +
    "\011\064\012\066\022\062\031\067\053\070\001\002\000" +
    "\054\021\103\022\076\023\102\024\106\025\075\026\107" +
    "\032\uffac\033\uffac\036\uffac\042\100\043\110\044\104\045" +
    "\112\046\077\047\101\050\111\051\073\052\074\054\uffac" +
    "\056\uffac\072\uffac\001\002\000\026\004\060\005\063\006" +
    "\061\007\072\010\065\011\064\012\066\022\062\031\067" +
    "\053\070\001\002\000\042\021\103\022\076\023\102\024" +
    "\106\025\075\026\107\036\151\042\100\043\110\044\104" +
    "\045\112\046\077\047\101\050\111\051\073\052\074\001" +
    "\002\000\056\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\032\uffa3\033\uffa3\035\152\036\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\054\uffa3\056\uffa3\072\uffa3\001\002\000\026\004" +
    "\060\005\063\006\061\007\072\010\065\011\064\012\066" +
    "\022\062\031\067\053\070\001\002\000\042\021\103\022" +
    "\076\023\102\024\106\025\075\026\107\036\154\042\100" +
    "\043\110\044\104\045\112\046\077\047\101\050\111\051" +
    "\073\052\074\001\002\000\054\021\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\032\uffa2\033\uffa2\036\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\054\uffa2\056\uffa2\072\uffa2\001\002\000" +
    "\054\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\032\uffbf\033\uffbf\036\uffbf\042\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf" +
    "\056\uffbf\072\uffbf\001\002\000\004\002\001\001\002\000" +
    "\026\004\060\005\063\006\061\007\072\010\065\011\064" +
    "\012\066\022\062\031\067\053\070\001\002\000\042\021" +
    "\103\022\076\023\102\024\106\025\075\026\107\032\161" +
    "\042\100\043\110\044\104\045\112\046\077\047\101\050" +
    "\111\051\073\052\074\001\002\000\004\033\162\001\002" +
    "\000\050\003\027\010\016\013\012\014\024\015\007\016" +
    "\034\017\036\020\005\057\031\060\010\061\050\062\025" +
    "\064\021\065\017\066\041\067\051\070\014\071\032\073" +
    "\040\001\002\000\052\003\027\010\016\013\012\014\024" +
    "\015\007\016\034\017\036\020\005\034\164\057\031\060" +
    "\010\061\050\062\025\064\021\065\017\066\041\067\051" +
    "\070\014\071\032\073\040\001\002\000\054\002\uffc9\003" +
    "\uffc9\010\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\034\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\073\uffc9" +
    "\001\002\000\004\031\166\001\002\000\030\004\060\005" +
    "\063\006\061\007\072\010\065\011\064\012\066\022\062" +
    "\031\067\032\167\053\070\001\002\000\004\056\176\001" +
    "\002\000\006\032\173\072\172\001\002\000\044\021\103" +
    "\022\076\023\102\024\106\025\075\026\107\032\uffc0\042" +
    "\100\043\110\044\104\045\112\046\077\047\101\050\111" +
    "\051\073\052\074\072\uffc0\001\002\000\026\004\060\005" +
    "\063\006\061\007\072\010\065\011\064\012\066\022\062" +
    "\031\067\053\070\001\002\000\004\056\174\001\002\000" +
    "\054\002\uffc3\003\uffc3\010\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\034\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3" +
    "\071\uffc3\073\uffc3\001\002\000\044\021\103\022\076\023" +
    "\102\024\106\025\075\026\107\032\uffc1\042\100\043\110" +
    "\044\104\045\112\046\077\047\101\050\111\051\073\052" +
    "\074\072\uffc1\001\002\000\054\002\uffc2\003\uffc2\010\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\034" +
    "\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\064\uffc2\065\uffc2" +
    "\066\uffc2\067\uffc2\070\uffc2\071\uffc2\073\uffc2\001\002\000" +
    "\054\002\uffcb\003\uffcb\010\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\034\uffcb\057\uffcb\060\uffcb\061" +
    "\uffcb\062\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb" +
    "\071\uffcb\073\uffcb\001\002\000\054\002\uffef\003\uffef\010" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\034\uffef\057\uffef\060\uffef\061\uffef\062\uffef\064\uffef\065" +
    "\uffef\066\uffef\067\uffef\070\uffef\071\uffef\073\uffef\001\002" +
    "\000\026\004\060\005\063\006\061\007\072\010\065\011" +
    "\064\012\066\022\062\031\067\053\070\001\002\000\042" +
    "\021\103\022\076\023\102\024\106\025\075\026\107\032" +
    "\203\042\100\043\110\044\104\045\112\046\077\047\101" +
    "\050\111\051\073\052\074\001\002\000\004\033\204\001" +
    "\002\000\050\003\027\010\016\013\012\014\024\015\007" +
    "\016\034\017\036\020\005\057\031\060\010\061\050\062" +
    "\025\064\021\065\017\066\041\067\051\070\014\071\032" +
    "\073\040\001\002\000\052\003\027\010\016\013\012\014" +
    "\024\015\007\016\034\017\036\020\005\034\206\057\031" +
    "\060\010\061\050\062\025\064\021\065\017\066\041\067" +
    "\051\070\014\071\032\073\040\001\002\000\056\002\uffd7" +
    "\003\uffd7\010\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\034\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7" +
    "\063\207\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071" +
    "\uffd7\073\uffd7\001\002\000\006\033\210\062\025\001\002" +
    "\000\050\003\027\010\016\013\012\014\024\015\007\016" +
    "\034\017\036\020\005\057\031\060\010\061\050\062\025" +
    "\064\021\065\017\066\041\067\051\070\014\071\032\073" +
    "\040\001\002\000\054\002\uffd5\003\uffd5\010\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\034\uffd5\057" +
    "\uffd5\060\uffd5\061\uffd5\062\uffd5\064\uffd5\065\uffd5\066\uffd5" +
    "\067\uffd5\070\uffd5\071\uffd5\073\uffd5\001\002\000\052\003" +
    "\027\010\016\013\012\014\024\015\007\016\034\017\036" +
    "\020\005\034\213\057\031\060\010\061\050\062\025\064" +
    "\021\065\017\066\041\067\051\070\014\071\032\073\040" +
    "\001\002\000\054\002\uffd6\003\uffd6\010\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\034\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\064\uffd6\065\uffd6\066\uffd6\067" +
    "\uffd6\070\uffd6\071\uffd6\073\uffd6\001\002\000\004\055\215" +
    "\001\002\000\016\014\024\015\007\016\034\017\036\020" +
    "\005\071\032\001\002\000\010\035\221\041\220\056\217" +
    "\001\002\000\054\002\uffeb\003\uffeb\010\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\034\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\064\uffeb\065\uffeb\066\uffeb\067" +
    "\uffeb\070\uffeb\071\uffeb\073\uffeb\001\002\000\026\004\060" +
    "\005\063\006\061\007\072\010\065\011\064\012\066\022" +
    "\062\031\067\053\070\001\002\000\004\036\222\001\002" +
    "\000\006\035\223\041\224\001\002\000\004\036\234\001" +
    "\002\000\004\035\225\001\002\000\026\004\060\005\063" +
    "\006\061\007\072\010\065\011\064\012\066\022\062\031" +
    "\067\053\070\001\002\000\044\021\103\022\076\023\102" +
    "\024\106\025\075\026\107\036\uffe7\042\100\043\110\044" +
    "\104\045\112\046\077\047\101\050\111\051\073\052\074" +
    "\072\uffe7\001\002\000\006\036\231\072\230\001\002\000" +
    "\026\004\060\005\063\006\061\007\072\010\065\011\064" +
    "\012\066\022\062\031\067\053\070\001\002\000\004\056" +
    "\232\001\002\000\054\002\uffea\003\uffea\010\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\034\uffea\057" +
    "\uffea\060\uffea\061\uffea\062\uffea\064\uffea\065\uffea\066\uffea" +
    "\067\uffea\070\uffea\071\uffea\073\uffea\001\002\000\044\021" +
    "\103\022\076\023\102\024\106\025\075\026\107\036\uffe8" +
    "\042\100\043\110\044\104\045\112\046\077\047\101\050" +
    "\111\051\073\052\074\072\uffe8\001\002\000\004\041\235" +
    "\001\002\000\004\035\236\001\002\000\004\035\240\001" +
    "\002\000\006\036\244\072\243\001\002\000\026\004\060" +
    "\005\063\006\061\007\072\010\065\011\064\012\066\022" +
    "\062\031\067\053\070\001\002\000\006\036\242\072\230" +
    "\001\002\000\006\036\uffe5\072\uffe5\001\002\000\004\035" +
    "\246\001\002\000\004\056\245\001\002\000\054\002\uffe9" +
    "\003\uffe9\010\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\034\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9" +
    "\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\073" +
    "\uffe9\001\002\000\026\004\060\005\063\006\061\007\072" +
    "\010\065\011\064\012\066\022\062\031\067\053\070\001" +
    "\002\000\006\036\250\072\230\001\002\000\006\036\uffe6" +
    "\072\uffe6\001\002\000\042\021\103\022\076\023\102\024" +
    "\106\025\075\026\107\042\100\043\110\044\104\045\112" +
    "\046\077\047\101\050\111\051\073\052\074\056\252\001" +
    "\002\000\054\002\uffec\003\uffec\010\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\034\uffec\057\uffec\060" +
    "\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec" +
    "\070\uffec\071\uffec\073\uffec\001\002\000\042\021\103\022" +
    "\076\023\102\024\106\025\075\026\107\033\254\042\100" +
    "\043\110\044\104\045\112\046\077\047\101\050\111\051" +
    "\073\052\074\001\002\000\030\004\060\005\063\006\061" +
    "\007\072\010\065\011\064\012\066\022\062\031\067\037" +
    "\255\053\070\001\002\000\004\054\267\001\002\000\032" +
    "\004\060\005\063\006\061\007\072\010\065\011\064\012" +
    "\066\022\062\031\067\034\265\037\255\053\070\001\002" +
    "\000\032\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\022\uffd2\031\uffd2\034\uffd2\037\uffd2\053\uffd2" +
    "\001\002\000\042\021\103\022\076\023\102\024\106\025" +
    "\075\026\107\042\100\043\110\044\104\045\112\046\077" +
    "\047\101\050\111\051\073\052\074\054\261\001\002\000" +
    "\004\033\262\001\002\000\050\003\027\010\016\013\012" +
    "\014\024\015\007\016\034\017\036\020\005\057\031\060" +
    "\010\061\050\062\025\064\021\065\017\066\041\067\051" +
    "\070\014\071\032\073\040\001\002\000\052\003\027\010" +
    "\016\013\012\014\024\015\007\016\034\017\036\020\005" +
    "\034\264\057\031\060\010\061\050\062\025\064\021\065" +
    "\017\066\041\067\051\070\014\071\032\073\040\001\002" +
    "\000\032\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\022\uffd1\031\uffd1\034\uffd1\037\uffd1\053\uffd1" +
    "\001\002\000\054\002\uffd4\003\uffd4\010\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\034\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\064\uffd4\065\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\071\uffd4\073\uffd4\001\002\000\032\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\022" +
    "\uffd3\031\uffd3\034\uffd3\037\uffd3\053\uffd3\001\002\000\004" +
    "\033\270\001\002\000\050\003\027\010\016\013\012\014" +
    "\024\015\007\016\034\017\036\020\005\057\031\060\010" +
    "\061\050\062\025\064\021\065\017\066\041\067\051\070" +
    "\014\071\032\073\040\001\002\000\052\003\027\010\016" +
    "\013\012\014\024\015\007\016\034\017\036\020\005\034" +
    "\272\057\031\060\010\061\050\062\025\064\021\065\017" +
    "\066\041\067\051\070\014\071\032\073\040\001\002\000" +
    "\032\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\022\uffd0\031\uffd0\034\uffd0\037\uffd0\053\uffd0\001" +
    "\002\000\004\010\275\001\002\000\026\004\060\005\063" +
    "\006\061\007\072\010\065\011\064\012\066\022\062\031" +
    "\067\053\070\001\002\000\010\027\300\030\276\041\277" +
    "\001\002\000\004\056\304\001\002\000\026\004\060\005" +
    "\063\006\061\007\072\010\065\011\064\012\066\022\062" +
    "\031\067\053\070\001\002\000\004\056\301\001\002\000" +
    "\076\002\uffe1\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\022\uffe1\031\uffe1\034\uffe1\053\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\062\uffe1\064\uffe1\065\uffe1\066" +
    "\uffe1\067\uffe1\070\uffe1\071\uffe1\073\uffe1\001\002\000\042" +
    "\021\103\022\076\023\102\024\106\025\075\026\107\042" +
    "\100\043\110\044\104\045\112\046\077\047\101\050\111" +
    "\051\073\052\074\056\303\001\002\000\076\002\uffe2\003" +
    "\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\022\uffe2\031\uffe2\034\uffe2\053\uffe2\057\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070" +
    "\uffe2\071\uffe2\073\uffe2\001\002\000\076\002\uffe0\003\uffe0" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\022\uffe0\031\uffe0\034\uffe0\053\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0" +
    "\071\uffe0\073\uffe0\001\002\000\042\021\103\022\076\023" +
    "\102\024\106\025\075\026\107\042\100\043\110\044\104" +
    "\045\112\046\077\047\101\050\111\051\073\052\074\056" +
    "\306\001\002\000\004\010\307\001\002\000\010\027\317" +
    "\030\315\041\316\001\002\000\004\032\311\001\002\000" +
    "\004\033\312\001\002\000\050\003\027\010\016\013\012" +
    "\014\024\015\007\016\034\017\036\020\005\057\031\060" +
    "\010\061\050\062\025\064\021\065\017\066\041\067\051" +
    "\070\014\071\032\073\040\001\002\000\052\003\027\010" +
    "\016\013\012\014\024\015\007\016\034\017\036\020\005" +
    "\034\314\057\031\060\010\061\050\062\025\064\021\065" +
    "\017\066\041\067\051\070\014\071\032\073\040\001\002" +
    "\000\054\002\uffcf\003\uffcf\010\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\034\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\062\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070" +
    "\uffcf\071\uffcf\073\uffcf\001\002\000\004\032\uffcc\001\002" +
    "\000\026\004\060\005\063\006\061\007\072\010\065\011" +
    "\064\012\066\022\062\031\067\053\070\001\002\000\004" +
    "\032\uffcd\001\002\000\042\021\103\022\076\023\102\024" +
    "\106\025\075\026\107\032\uffce\042\100\043\110\044\104" +
    "\045\112\046\077\047\101\050\111\051\073\052\074\001" +
    "\002\000\026\004\060\005\063\006\061\007\072\010\065" +
    "\011\064\012\066\022\062\031\067\053\070\001\002\000" +
    "\042\021\103\022\076\023\102\024\106\025\075\026\107" +
    "\036\323\042\100\043\110\044\104\045\112\046\077\047" +
    "\101\050\111\051\073\052\074\001\002\000\006\035\324" +
    "\041\325\001\002\000\026\004\060\005\063\006\061\007" +
    "\072\010\065\011\064\012\066\022\062\031\067\053\070" +
    "\001\002\000\026\004\060\005\063\006\061\007\072\010" +
    "\065\011\064\012\066\022\062\031\067\053\070\001\002" +
    "\000\042\021\103\022\076\023\102\024\106\025\075\026" +
    "\107\042\100\043\110\044\104\045\112\046\077\047\101" +
    "\050\111\051\073\052\074\056\327\001\002\000\054\002" +
    "\uffdf\003\uffdf\010\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\034\uffdf\057\uffdf\060\uffdf\061\uffdf\062" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf" +
    "\073\uffdf\001\002\000\042\021\103\022\076\023\102\024" +
    "\106\025\075\026\107\036\331\042\100\043\110\044\104" +
    "\045\112\046\077\047\101\050\111\051\073\052\074\001" +
    "\002\000\004\041\332\001\002\000\026\004\060\005\063" +
    "\006\061\007\072\010\065\011\064\012\066\022\062\031" +
    "\067\053\070\001\002\000\042\021\103\022\076\023\102" +
    "\024\106\025\075\026\107\042\100\043\110\044\104\045" +
    "\112\046\077\047\101\050\111\051\073\052\074\056\334" +
    "\001\002\000\054\002\uffde\003\uffde\010\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\034\uffde\057\uffde" +
    "\060\uffde\061\uffde\062\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\070\uffde\071\uffde\073\uffde\001\002\000\054\002\uffca" +
    "\003\uffca\010\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\034\uffca\057\uffca\060\uffca\061\uffca\062\uffca" +
    "\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca\073" +
    "\uffca\001\002\000\026\004\060\005\063\006\061\007\072" +
    "\010\065\011\064\012\066\022\062\031\067\053\070\001" +
    "\002\000\042\021\103\022\076\023\102\024\106\025\075" +
    "\026\107\032\340\042\100\043\110\044\104\045\112\046" +
    "\077\047\101\050\111\051\073\052\074\001\002\000\004" +
    "\056\341\001\002\000\054\002\uffed\003\uffed\010\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\034\uffed" +
    "\057\uffed\060\uffed\061\uffed\062\uffed\064\uffed\065\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\073\uffed\001\002\000\004" +
    "\031\343\001\002\000\020\014\024\015\007\016\034\017" +
    "\036\020\005\032\345\071\032\001\002\000\006\032\354" +
    "\072\353\001\002\000\004\033\350\001\002\000\004\010" +
    "\347\001\002\000\006\032\uffc4\072\uffc4\001\002\000\050" +
    "\003\027\010\016\013\012\014\024\015\007\016\034\017" +
    "\036\020\005\057\031\060\010\061\050\062\025\064\021" +
    "\065\017\066\041\067\051\070\014\071\032\073\040\001" +
    "\002\000\052\003\027\010\016\013\012\014\024\015\007" +
    "\016\034\017\036\020\005\034\352\057\031\060\010\061" +
    "\050\062\025\064\021\065\017\066\041\067\051\070\014" +
    "\071\032\073\040\001\002\000\054\002\uffc6\003\uffc6\010" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\034\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\073\uffc6\001\002" +
    "\000\016\014\024\015\007\016\034\017\036\020\005\071" +
    "\032\001\002\000\004\033\355\001\002\000\050\003\027" +
    "\010\016\013\012\014\024\015\007\016\034\017\036\020" +
    "\005\057\031\060\010\061\050\062\025\064\021\065\017" +
    "\066\041\067\051\070\014\071\032\073\040\001\002\000" +
    "\052\003\027\010\016\013\012\014\024\015\007\016\034" +
    "\017\036\020\005\034\357\057\031\060\010\061\050\062" +
    "\025\064\021\065\017\066\041\067\051\070\014\071\032" +
    "\073\040\001\002\000\054\002\uffc7\003\uffc7\010\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\034\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\067\uffc7\070\uffc7\071\uffc7\073\uffc7\001\002\000\004" +
    "\010\361\001\002\000\006\032\uffc5\072\uffc5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\050\002\044\003\017\006\014\007\041\010" +
    "\034\011\032\012\042\013\010\014\036\016\021\017\043" +
    "\020\045\021\046\022\005\023\022\025\012\027\025\031" +
    "\003\034\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\006\053\007\041\010\034\011\032\012\042" +
    "\013\010\014\036\016\021\017\043\020\045\021\046\022" +
    "\005\023\022\025\012\027\025\031\003\034\027\001\001" +
    "\000\004\024\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\052\006\014\007\041\010\034\011\032\012\042\013" +
    "\010\014\036\016\021\017\043\020\045\021\046\022\005" +
    "\023\022\025\012\027\025\031\003\034\027\001\001\000" +
    "\044\006\053\007\041\010\034\011\032\012\042\013\010" +
    "\014\036\016\021\017\043\020\045\021\046\022\005\023" +
    "\022\025\012\027\025\031\003\034\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\136\001\001" +
    "\000\004\024\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\131\001\001\000\004\024\130\001\001" +
    "\000\004\024\127\001\001\000\004\024\126\001\001\000" +
    "\004\024\125\001\001\000\004\024\124\001\001\000\004" +
    "\024\123\001\001\000\004\024\122\001\001\000\004\024" +
    "\121\001\001\000\004\024\120\001\001\000\002\001\001" +
    "\000\004\024\116\001\001\000\004\024\115\001\001\000" +
    "\004\024\114\001\001\000\004\024\113\001\001\000\004" +
    "\024\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\141\001\001\000\002\001\001\000\004" +
    "\024\143\001\001\000\002\001\001\000\004\024\145\001" +
    "\001\000\002\001\001\000\004\024\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\162\006\014\007\041\010\034" +
    "\011\032\012\042\013\010\014\036\016\021\017\043\020" +
    "\045\021\046\022\005\023\022\025\012\027\025\031\003" +
    "\034\027\001\001\000\044\006\053\007\041\010\034\011" +
    "\032\012\042\013\010\014\036\016\021\017\043\020\045" +
    "\021\046\022\005\023\022\025\012\027\025\031\003\034" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\170\030\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\204\006\014\007\041\010\034\011\032\012\042\013\010" +
    "\014\036\016\021\017\043\020\045\021\046\022\005\023" +
    "\022\025\012\027\025\031\003\034\027\001\001\000\044" +
    "\006\053\007\041\010\034\011\032\012\042\013\010\014" +
    "\036\016\021\017\043\020\045\021\046\022\005\023\022" +
    "\025\012\027\025\031\003\034\027\001\001\000\002\001" +
    "\001\000\004\012\210\001\001\000\046\003\211\006\014" +
    "\007\041\010\034\011\032\012\042\013\010\014\036\016" +
    "\021\017\043\020\045\021\046\022\005\023\022\025\012" +
    "\027\025\031\003\034\027\001\001\000\002\001\001\000" +
    "\044\006\053\007\041\010\034\011\032\012\042\013\010" +
    "\014\036\016\021\017\043\020\045\021\046\022\005\023" +
    "\022\025\012\027\025\031\003\034\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\225\032\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\236\001\001\000" +
    "\002\001\001\000\006\024\225\032\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\225\032\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\255\005\256" +
    "\024\257\001\001\000\002\001\001\000\006\005\265\024" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\262\006\014\007\041\010\034\011" +
    "\032\012\042\013\010\014\036\016\021\017\043\020\045" +
    "\021\046\022\005\023\022\025\012\027\025\031\003\034" +
    "\027\001\001\000\044\006\053\007\041\010\034\011\032" +
    "\012\042\013\010\014\036\016\021\017\043\020\045\021" +
    "\046\022\005\023\022\025\012\027\025\031\003\034\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\270\006\014\007\041" +
    "\010\034\011\032\012\042\013\010\014\036\016\021\017" +
    "\043\020\045\021\046\022\005\023\022\025\012\027\025" +
    "\031\003\034\027\001\001\000\044\006\053\007\041\010" +
    "\034\011\032\012\042\013\010\014\036\016\021\017\043" +
    "\020\045\021\046\022\005\023\022\025\012\027\025\031" +
    "\003\034\027\001\001\000\002\001\001\000\004\011\273" +
    "\001\001\000\004\024\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\312\006\014\007\041\010\034\011\032\012\042" +
    "\013\010\014\036\016\021\017\043\020\045\021\046\022" +
    "\005\023\022\025\012\027\025\031\003\034\027\001\001" +
    "\000\044\006\053\007\041\010\034\011\032\012\042\013" +
    "\010\014\036\016\021\017\043\020\045\021\046\022\005" +
    "\023\022\025\012\027\025\031\003\034\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\327" +
    "\001\001\000\004\024\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\336\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\345\026\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\350\006\014\007\041\010\034\011\032\012\042\013\010" +
    "\014\036\016\021\017\043\020\045\021\046\022\005\023" +
    "\022\025\012\027\025\031\003\034\027\001\001\000\044" +
    "\006\053\007\041\010\034\011\032\012\042\013\010\014" +
    "\036\016\021\017\043\020\045\021\046\022\005\023\022" +
    "\025\012\027\025\031\003\034\027\001\001\000\002\001" +
    "\001\000\004\022\357\001\001\000\002\001\001\000\046" +
    "\003\355\006\014\007\041\010\034\011\032\012\042\013" +
    "\010\014\036\016\021\017\043\020\045\021\046\022\005" +
    "\023\022\025\012\027\025\031\003\034\027\001\001\000" +
    "\044\006\053\007\041\010\034\011\032\012\042\013\010" +
    "\014\036\016\021\017\043\020\045\021\046\022\005\023" +
    "\022\025\012\027\025\031\003\034\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CDO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SALIDA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CONTINIU 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= Start_WITH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= DECLARACION_VECTORES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= ASIGNACION_VECT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(d, b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(d, b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_VECTORES ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS COR1 COR2 IGUAL COR1 LISTAVALORES1 COR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                                                                                                                    RESULT = new Declaracion_Vectores(b, d, null, a, c, aleft, aright);
                                                                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_VECTORES ::= MUTABILIDAD ID_VARIABLE DOSPUNTOS TIPOS COR1 COR2 COR1 COR2 IGUAL COR1 LISTAVALORES2 COR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> d = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                LinkedList<LinkedList<Instruccion>> valores_2D = d;
                RESULT = new Declaracion_Vectores(b, null, valores_2D, a, c, aleft, aright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTAVALORES1 ::= LISTAVALORES1 COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTAVALORES1 ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTAVALORES2 ::= LISTAVALORES2 COMA COR1 LISTAVALORES1 COR2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTAVALORES2 ::= COR1 LISTAVALORES1 COR2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MUTABILIDAD ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MUTABILIDAD ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= ID_VARIABLE IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION ::= ID_VARIABLE INCREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.INCREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION ::= ID_VARIABLE DECREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.DECREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION_VECT ::= ID_VARIABLE COR1 EXPRESION COR2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVec(a, b, null, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION_VECT ::= ID_VARIABLE COR1 EXPRESION COR2 COR1 EXPRESION COR2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVec(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPOS ::= TYPE_INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPOS ::= TYPE_DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPOS ::= TYPE_STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPOS ::= TYPE_CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPOS ::= TYPE_BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIF ::= IF PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SIF ::= IF PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 ELSE LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c,  aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SIF ::= IF PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF_ELSE_IF(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SMATCH ::= MATCH EXPRESION LLAV1 CASES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Cases_Match> b = (LinkedList<Cases_Match>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASES ::= CASES CASE 
            {
              LinkedList<Cases_Match> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Cases_Match> a = (LinkedList<Cases_Match>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cases_Match b = (Cases_Match)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASES ::= CASE 
            {
              LinkedList<Cases_Match> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cases_Match a = (Cases_Match)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CASE ::= EXPRESION FLECHA LLAV1 INSTRUCCIONES LLAV2 
            {
              Cases_Match RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Cases_Match(a, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CASE ::= DEFAULT_MATCH FLECHA LLAV1 INSTRUCCIONES LLAV2 
            {
              Cases_Match RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Cases_Match(null, a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ACTUALIZA_FOR ::= ID_VARIABLE IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ACTUALIZA_FOR ::= ID_VARIABLE INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.INCREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ACTUALIZA_FOR ::= ID_VARIABLE DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, OperadoresVariable.DECREMENTO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SALIDA ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SALIDA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTINIU ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINIU",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CDO_WHILE ::= DO LLAV1 INSTRUCCIONES LLAV2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Do_While(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDO_WHILE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // METODO ::= TIPOS ID_VARIABLE PAR1 PARAMS PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, p, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // METODO ::= TIPOS ID_VARIABLE PAR1 PAR2 LLAV1 INSTRUCCIONES LLAV2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMS ::= PARAMS COMA TIPOS ID_VARIABLE 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                                RESULT = a;
                                                                var hm2 = new HashMap<String, Object>();
                                                                hm2.put("id", c);
                                                                hm2.put("tipo", b);
                                                                RESULT.add(hm2);
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMS ::= TIPOS ID_VARIABLE 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>();
                                                                var hm = new HashMap<String, Object>();
                                                                hm.put("id",b);
                                                                hm.put("tipo",a); 
                                                                RESULT.add(hm);
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Start_WITH ::= START_WITH ID_VARIABLE PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Execute(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Start_WITH",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Start_WITH ::= START_WITH ID_VARIABLE PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Execute(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Start_WITH",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        RESULT = a; 
                                                        RESULT.add(b);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        RESULT = new LinkedList<Instruccion>(); 
                                                        RESULT.add(a);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION IGUAL_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION DIFERENTE_DE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION MENOR_QUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION MAYOR_QUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_IGUAL_QUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= PAR1 TYPE_INT PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, OperadoresCasteo.INT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= PAR1 TYPE_DOUBLE PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, OperadoresCasteo.DOUBLE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= PAR1 TYPE_CHAR PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, OperadoresCasteo.CHAR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Double.valueOf(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= CHAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a.charAt(1), new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= ID_VARIABLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= ID_VARIABLE COR1 EXPRESION COR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVec(a, b, null, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= ID_VARIABLE COR1 EXPRESION COR2 COR1 EXPRESION COR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVec(a, b, c, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
