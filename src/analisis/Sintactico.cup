package analisis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;

//instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.sentencias_Control.If;
import instrucciones.sentencias_Control.IF_ELSE_IF;
import instrucciones.sentencias_Control.Match;
import instrucciones.sentencias_Control.Cases_Match;
import instrucciones.sentencias_Ciclicas.For;
import instrucciones.sentencias_Ciclicas.While;
import instrucciones.sentencias_Ciclicas.Do_While;
import instrucciones.sentencias_Transferencia.Break;
import instrucciones.sentencias_Transferencia.Continue;
import instrucciones.subrutina.Metodo;
import instrucciones.subrutina.Execute;
import instrucciones.vectores.Declaracion_Vectores;

//expresiones
import expresiones.Nativo;
import expresiones.aritmeticas.Aritmeticas;
import expresiones.aritmeticas.OperadoresAritmeticos;
import expresiones.relacionales.OperadoresRelacionales;
import expresiones.relacionales.Relacionales;
import expresiones.logicas.OperadoresLogicos;
import expresiones.logicas.Logicas;
import expresiones.casteo.Casteos;
import expresiones.casteo.OperadoresCasteo;
import expresiones.variable.AccesoVar;
import expresiones.variable.OperadoresVariable;

// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

:}

action code
{:

:}

terminal String CADENA, ENTERO, DECIMAL, CHAR, ID_VARIABLE;
terminal String TRUE, FALSE;
terminal IMPRIMIR, TYPE_INT, TYPE_DOUBLE, TYPE_CHAR, TYPE_STRING, TYPE_BOOLEAN;
terminal MAS, MENOS, MULT, DIV, POTENCIA, MODULO, INCREMENTO, DECREMENTO;
terminal PAR1, PAR2, LLAV1, LLAV2, COR1, COR2, DEFAULT_MATCH;
terminal UMENOS;

terminal IGUAL, IGUAL_IGUAL, DIFERENTE_DE, MENOR_QUE, MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAL;
terminal OR, AND, XOR, NOT, FLECHA;
terminal DOSPUNTOS, FINCADENA;
terminal String BREAK;
terminal CONST, VAR, IF, ELSE, MATCH, FOR, WHILE, DO, CONTINUE;
terminal VOID, COMA, START_WITH;

//no terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal LinkedList<Cases_Match> CASES;
nonterminal Cases_Match CASE;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion IMPRESION, DECLARACION, ASIGNACION;
nonterminal Instruccion SIF, SMATCH;
nonterminal Instruccion CFOR, ACTUALIZA_FOR, CWHILE, CDO_WHILE;
nonterminal Instruccion SALIDA, CONTINIU;
nonterminal Tipo TIPOS;
nonterminal Boolean MUTABILIDAD;
nonterminal Instruccion EXPRESION;
nonterminal Instruccion METODO;
nonterminal LinkedList<HashMap> PARAMS;
nonterminal Instruccion Start_WITH;
nonterminal LinkedList<Instruccion> PARAMSCALL;
nonterminal Instruccion DECLARACION_VECTORES;
nonterminal LinkedList<Instruccion> LISTAVALORES1, LISTAVALORES2;

precedence left OR;  // nivel 8, asociatividad izquierda
precedence left AND;  // nivel 7, asociatividad izquierda
precedence left XOR;  // nivel 6, asociatividad izquierda
precedence right NOT;  // nivel 5, asociatividad derecha
precedence left IGUAL_IGUAL, DIFERENTE_DE, MENOR_QUE, MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAL;  // nivel 4, asociatividad izquierda
precedence left MAS, MENOS;  // nivel 3, asociatividad izquierda
precedence left MULT, DIV, MODULO;  // nivel 2, asociatividad izquierda
precedence nonassoc POTENCIA;  // nivel 1, no asociativa
precedence right UMENOS;  // nivel 0, asociatividad derecha



start with INICIO;

INICIO ::= INSTRUCCIONES:a    {: RESULT = a; :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b         {: RESULT = a; RESULT.add(b); :}
            | INSTRUCCION:a                             {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= IMPRESION:a                             {: RESULT = a; :}
            | DECLARACION:a                             {: RESULT = a; :}
            | ASIGNACION:a                              {: RESULT = a; :}
            | SIF:a                                     {: RESULT = a; :}
            | CFOR:a                                    {: RESULT = a; :}
            | CWHILE:a                                  {: RESULT = a; :}
            | CDO_WHILE:a                               {: RESULT = a; :}
            | SALIDA:a                                  {: RESULT = a; :}
            | CONTINIU:a                                {: RESULT = a; :}
            | SMATCH:a                                  {: RESULT = a; :}
            | METODO:a                                  {: RESULT = a; :}
            | Start_WITH:a                              {: RESULT = a; :}
            | DECLARACION_VECTORES:a                    {: RESULT = a; :}
            | error FINCADENA
            | error
;

IMPRESION ::= IMPRIMIR PAR1 EXPRESION:a PAR2 FINCADENA      {: RESULT = new Print(a, aleft, aright); :}
;

DECLARACION ::= MUTABILIDAD:d ID_VARIABLE:b DOSPUNTOS TIPOS:a IGUAL EXPRESION:c FINCADENA         {: RESULT = new Declaracion(d, b, c, a, aleft, aright); :}
            | MUTABILIDAD:d ID_VARIABLE:b DOSPUNTOS TIPOS:a FINCADENA                             {: RESULT = new Declaracion(d, b, a, aleft, aright); :}
;

//public Declaracion_Vectores(String identificador, LinkedList<Instruccion> valores1, LinkedList<Instruccion> valores2, boolean mutabilidad, Tipo tipo, int linea, int columna) {
DECLARACION_VECTORES ::= MUTABILIDAD:a ID_VARIABLE:b DOSPUNTOS TIPOS:c COR1 COR2 IGUAL COR1 LISTAVALORES1:d COR2 FINCADENA      {: 
                                                                                                                                    RESULT = new Declaracion_Vectores(b, d, null, a, c, aleft, aright);
                                                                                                                                :}
;

LISTAVALORES1 ::= LISTAVALORES1:a COMA EXPRESION:b                  {: RESULT = a; RESULT.add(b); :}
            | EXPRESION:a                                           {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

MUTABILIDAD ::= VAR         {: RESULT = true; :}
            | CONST         {: RESULT = false; :}
;

ASIGNACION ::= ID_VARIABLE:a IGUAL EXPRESION:b FINCADENA         {: RESULT = new AsignacionVar(a, b, aleft, aright); :}
    | ID_VARIABLE:a INCREMENTO FINCADENA                         {: RESULT = new AsignacionVar(a, OperadoresVariable.INCREMENTO, aleft, aright); :}
    | ID_VARIABLE:a DECREMENTO FINCADENA                         {: RESULT = new AsignacionVar(a, OperadoresVariable.DECREMENTO, aleft, aright); :}
;

TIPOS ::= TYPE_INT          {: RESULT = new Tipo(tipoDato.ENTERO); :}
        | TYPE_DOUBLE       {: RESULT = new Tipo(tipoDato.DECIMAL); :}
        | TYPE_STRING       {: RESULT = new Tipo(tipoDato.CADENA); :}
        | TYPE_CHAR         {: RESULT = new Tipo(tipoDato.CARACTER); :}
        | TYPE_BOOLEAN      {: RESULT = new Tipo(tipoDato.BOOLEANO); :}
        | VOID              {: RESULT = new Tipo(tipoDato.VOID); :}
;

SIF ::= IF PAR1 EXPRESION:a PAR2 LLAV1 INSTRUCCIONES:b LLAV2                                      {: RESULT = new If(a, b, aleft, aright);   :}
    |   IF PAR1 EXPRESION:a PAR2 LLAV1 INSTRUCCIONES:b LLAV2 ELSE LLAV1 INSTRUCCIONES:c LLAV2       {: RESULT = new If(a, b, c,  aleft, aright);   :}
    |   IF PAR1 EXPRESION:a PAR2 LLAV1 INSTRUCCIONES:b LLAV2 ELSE SIF:c                           {: RESULT = new IF_ELSE_IF(a, b, c, aleft, aright); :}
;

SMATCH ::= MATCH EXPRESION:a LLAV1 CASES:b LLAV2                      {: RESULT = new Match(a, b, aleft, aright); :}
;

CASES ::= CASES:a CASE:b            {: RESULT = a; RESULT.add(b); :}
        | CASE:a                    {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

CASE ::= EXPRESION:a FLECHA LLAV1 INSTRUCCIONES:b LLAV2           {: RESULT = new Cases_Match(a, b, true, aleft, aright); :}
        | DEFAULT_MATCH FLECHA LLAV1 INSTRUCCIONES:a LLAV2        {: RESULT = new Cases_Match(null, a, false, aleft, aright); :}
;

CFOR ::= FOR PAR1 ASIGNACION:a EXPRESION:b FINCADENA ACTUALIZA_FOR:c PAR2 LLAV1 INSTRUCCIONES:d LLAV2     
{:   RESULT = new For(a, b, c, d, aleft, aright);   :}
;

ACTUALIZA_FOR ::= ID_VARIABLE:a IGUAL EXPRESION:b       {: RESULT = new AsignacionVar(a, b, aleft, aright);  :}
    | ID_VARIABLE:a INCREMENTO                          {: RESULT = new AsignacionVar(a, OperadoresVariable.INCREMENTO, aleft, aright); :}
    | ID_VARIABLE:a DECREMENTO                          {: RESULT = new AsignacionVar(a, OperadoresVariable.DECREMENTO, aleft, aright); :}
;

SALIDA ::= BREAK:a FINCADENA            {:    RESULT = new Break(aleft, aright);     :}
;

CONTINIU ::= CONTINUE:a FINCADENA      {:    RESULT = new Continue(aleft, aright);     :}
;

CWHILE ::= WHILE PAR1 EXPRESION:a PAR2 LLAV1 INSTRUCCIONES:b LLAV2      {: RESULT = new While(a, b, aleft, aright); :}
;

CDO_WHILE ::= DO LLAV1 INSTRUCCIONES:a LLAV2 WHILE PAR1 EXPRESION:b PAR2 FINCADENA {: RESULT = new Do_While(b, a, aleft, aright); :}
;

// AGREGADO DE LA FASE 2
METODO ::= TIPOS:a ID_VARIABLE:b PAR1 PARAMS:p PAR2 LLAV1 INSTRUCCIONES:c LLAV2     {: RESULT = new Metodo(b, p, c, a, aleft, aright); :}
        | TIPOS:a ID_VARIABLE:b PAR1 PAR2 LLAV1 INSTRUCCIONES:c LLAV2               {: RESULT = new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright); :}
; 

PARAMS ::= PARAMS:a COMA TIPOS:b ID_VARIABLE:c              {: 
                                                                RESULT = a;
                                                                var hm2 = new HashMap<String, Object>();
                                                                hm2.put("id", c);
                                                                hm2.put("tipo", b);
                                                                RESULT.add(hm2);
                                                            :}

        | TIPOS:a ID_VARIABLE:b                             {: RESULT = new LinkedList<HashMap>();
                                                                var hm = new HashMap<String, Object>();
                                                                hm.put("id",b);
                                                                hm.put("tipo",a); 
                                                                RESULT.add(hm);
                                                            :}   
;

Start_WITH ::= START_WITH ID_VARIABLE:a PAR1 PARAMSCALL:b PAR2 FINCADENA        {: RESULT = new Execute(a, b, aleft, aright); :}
            |  START_WITH ID_VARIABLE:a PAR1 PAR2 FINCADENA                     {: RESULT = new Execute(a, new LinkedList<Instruccion>(), aleft, aright); :}
;

PARAMSCALL ::= PARAMSCALL:a COMA EXPRESION:b          {: 
                                                        RESULT = a; 
                                                        RESULT.add(b);
                                                    :}
            | EXPRESION:a                           {: 
                                                        RESULT = new LinkedList<Instruccion>(); 
                                                        RESULT.add(a);
                                                    :}
;

//public Relacionales(Instruccion operador1, Instruccion operador2, OperadoresRelacionales operacion, Tipo tipo, int linea, int columna) {
EXPRESION ::= MENOS EXPRESION:a                     {: RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); :} %prec UMENOS
            | EXPRESION:a MAS EXPRESION:b           {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); :}
            | EXPRESION:a MENOS EXPRESION:b         {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); :}
            | EXPRESION:a MODULO EXPRESION:b        {: RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.MODULO, aleft, aright); :}
            | EXPRESION:a MULT EXPRESION:b          {: RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); :}
            | EXPRESION:a DIV EXPRESION:b           {: RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.DIVISION, aleft, aright); :}
            | EXPRESION:a POTENCIA EXPRESION:b      {: RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.POTENCIA, aleft, aright); :}
            | EXPRESION:a IGUAL_IGUAL EXPRESION:b   {: RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_QUE, aleft, aright); :}
            | EXPRESION:a DIFERENTE_DE EXPRESION:b  {: RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright); :}
            | EXPRESION:a MENOR_QUE EXPRESION:b     {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_QUE, aleft, aright); :}
            | EXPRESION:a MENOR_IGUAL EXPRESION:b   {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR_IGUAL_QUE, aleft, aright); :}
            | EXPRESION:a MAYOR_QUE EXPRESION:b     {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_QUE, aleft, aright); :}
            | EXPRESION:a MAYOR_IGUAL EXPRESION:b   {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR_IGUAL_QUE, aleft, aright); :}
            | EXPRESION:a OR EXPRESION:b            {: RESULT = new Logicas(a, b, OperadoresLogicos.OR, aleft, aright); :}
            | EXPRESION:a AND EXPRESION:b           {: RESULT = new Logicas(a, b, OperadoresLogicos.AND, aleft, aright); :}
            | EXPRESION:a XOR EXPRESION:b           {: RESULT = new Logicas(a, b, OperadoresLogicos.XOR, aleft, aright); :}
            | NOT EXPRESION:a                       {: RESULT = new Logicas(a, OperadoresLogicos.NOT, aleft, aright); :}
            | PAR1 EXPRESION:a PAR2                 {: RESULT = a; :}
            | PAR1 TYPE_INT PAR2 EXPRESION:a        {: RESULT = new Casteos(a, OperadoresCasteo.INT, aleft, aright); :}
            | PAR1 TYPE_DOUBLE PAR2 EXPRESION:a     {: RESULT = new Casteos(a, OperadoresCasteo.DOUBLE, aleft, aright); :}
            | PAR1 TYPE_CHAR PAR2 EXPRESION:a       {: RESULT = new Casteos(a, OperadoresCasteo.CHAR, aleft, aright); :}
            | ENTERO:a                              {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); :}
            | DECIMAL:a                             {: RESULT = new Nativo(Double.valueOf(a), new Tipo(tipoDato.DECIMAL), aleft, aright); :}
            | CADENA:a                              {: RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); :}
            | TRUE:a                                {: RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); :}
            | FALSE:a                               {: RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); :}
            | CHAR:a                                {: RESULT = new Nativo(a.charAt(1), new Tipo(tipoDato.CARACTER), aleft, aright); :}
            | ID_VARIABLE:a                         {: RESULT = new AccesoVar(a, aleft, aright); :}
;